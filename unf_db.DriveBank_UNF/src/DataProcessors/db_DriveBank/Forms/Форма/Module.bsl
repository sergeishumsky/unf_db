
&НаКлиенте
перем мСоединениеHTTPПерем;
&НаКлиенте
перем мТипФайлаПерем;
&НаКлиенте
перем мЗаголовокПодвалаВыпискиПерем;
&НаКлиенте
перем мЗаголовокПодвалаТребовПерем;
&наКлиенте
перем мЗаголовокПодвалаПП;
&наКлиенте
перем мЗаголовокПодвалаПодпись;
&наКлиенте
перем мКлючХранилищаПерем;
&наКлиенте
перем мТипБраузера;



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ИЗМЕНЕИЯ ОСНОВНЫХ РЕКВИЗИТОВ
&НаКлиенте
Процедура Д_НачалоПриИзменении(Элемент)
	
	Если Объект.Д_Начало > Объект.Д_Окончание Тогда
		Объект.Д_Начало = Объект.Д_Окончание;
	КонецЕсли;	
	Объект.Период.ДатаНачала = Объект.Д_Начало;
	Объект.Период.ДатаОкончания = Объект.Д_Окончание;
	
	ЗагрузкаПриИзмененииРеквизитов();

КонецПроцедуры

&НаКлиенте
Процедура Д_ОкончаниеПриИзменении(Элемент)
	Если Объект.Д_Начало > Объект.Д_Окончание Тогда
		Объект.Д_Окончание = Объект.Д_Начало;
	КонецЕсли;		
	Объект.Период.ДатаНачала = Объект.Д_Начало;
	Объект.Период.ДатаОкончания = Объект.Д_Окончание;
	ЗагрузкаПриИзмененииРеквизитов();
КонецПроцедуры //

// Обработка события выбора счета организации
&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) И Объект.БанковскийСчет <> "ВсеСчета" Тогда
		
		Объект.ОтборБанковскийСчет = Объект.БанковскийСчет;
		
	КонецЕсли;
	
	ЗагрузкаПриИзмененииРеквизитов();
	
КонецПроцедуры

// Заполнени список выбора счетов организации данными из хранилища
&НаКлиенте
Процедура ЗаполнениеСпискаСчетов(Ключ) 

	
КонецПроцедуры	



#Область ПроцедурыЧенияЗаписинастроекВХранилище


// Открытие формы настроек
&НаКлиенте
Процедура Настройки(Команда)

	СтруктураПараметров = Новый Структура("АдресНастроекДоступа", Объект.АдресНастроекДоступа);
	
	ОткрытьФорму("Обработка.db_DriveBank.Форма.ФормаНастроек", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

	

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПрочитатьНастройкиДоступа()
	
	СоответствиеНастроек = db_ИнтерфейсыСервер.ПолучитьСоответствиеНастроекДоступа();
	
	Объект.АдресНастроекДоступа = ПоместитьВоВременноеХранилище(СоответствиеНастроек, ЭтаФорма.УникальныйИдентификатор);
	
	Для Каждого СтрокаНастройки Из СоответствиеНастроек Цикл
		
		НоваяСтрока = ТаблицаПараметровПодключения.Добавить();
		НоваяСтрока.Организация = СтрокаНастройки.Ключ;
		НоваяСтрока.ПараметрыПодключения = СтрокаНастройки.Значение;
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьНастройкиДоступа() 



&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область Инициализация

	ПрочитатьНастройкиДоступа();

	#КонецОбласти
	
	
	// Начальные значения реквизитов по умолчанию
	Объект.ВходящиеИсходящие = "ВсеОперации";	
	Объект.ТребованияАкцепт ="Все";
	
	// Все статусы документов  по умолчанию, код 10
	Объект.СтатусДокументаБанка = 10;
	
	Объект.Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	Объект.Период.ДатаНачала = ТекущаяДата();
	Объект.Период.ДатаОкончания = ТекущаяДата();
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	мСоединениеHTTPПерем = Новый HTTPСоединение("developerhub.alfabank.by",8273,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	Если Объект.Организация <> Неопределено Тогда
		ЗаполнениеСпискаСчетов(Объект.Организация);
	КонецЕсли;	  
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ВыпискиБанка;
	
	Объект.Д_Начало = ТекущаяДата()- 86400;
	Объект.Д_Окончание = ТекущаяДата();
	
	Объект.Период.ДатаНачала = Объект.Д_Начало;
	Объект.Период.ДатаОкончания = Объект.Д_Окончание;
	
	УстановитьВидимость();
	
	мТипБраузера = 1;
	
	Загрузить(Истина, Истина);
	ПолучитьСписокСуществующихДокументов();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	мСоединениеHTTPПерем = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыАвторизацииПользователя

// Ввод ключа АРИ
&НаКлиенте
Процедура АвторизацияПользователя(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаСтроки", ЭтотОбъект);
	
	ПоказатьВводСтроки(
	Оповещение,
	"Предыдущий ключ API", 
	"Введите ключ API",
	0, // (необ.) длина
	Ложь // (необ.) многострочность
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(Результат, Параметры) Экспорт 
	
	Если Не Результат = Неопределено Тогда
		
		Если СокрЛП(Результат) = "Предыдущий ключ API" Тогда
			Если НЕ ПустаяСтрока(Объект.Организация) Тогда	
				Ключ = ЧтениеКлючаАПИ(Объект.Организация);
				Если Ключ <> Неопределено Тогда
					Результат = Ключ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		ЭтаФорма.Параметры.keyAPI = Результат; 
		Если НЕ ПустаяСтрока(Результат) Тогда
			Авторизация(); 
		Иначе	
			Авторизация_Refresh_Token(); 
		КонецЕсли;	
	КонецЕсли;
 
КонецПроцедуры

// Получение token
&НаКлиенте
Процедура Авторизация() 
	
	ПараметрыАвторизации = "grant_type=password&username=#API&client_id=#ID&client_secret=#SECRET&scope=accounts read_documents profile create_documents sign_documents";
	
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#API",URLEncode(ЭтаФорма.Параметры.keyAPI));
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#ID",Объект.НастройкаClientID);
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#SECRET",Объект.НастройкаCllientSecret);
	
	HTTP_Запрос = Новый HTTPЗапрос("/token");
	HTTP_Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTP_Запрос.УстановитьТелоИзСтроки(ПараметрыАвторизации, "CESU-8");
	
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	
	Отв=мСоединениеHTTPПерем.ОтправитьДляОбработки(HTTP_Запрос,ВременныйФайл);
	
	Если Отв.КодСостояния <> 200 Тогда 	
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния,ВременныйФайл);
		
		// Удаление временного файла	
		Чтение = Неопределено;
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	// Чтение файла JSON 
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если Чтение.ТекущееЗначение = "access_token" Тогда
				Чтение.Прочитать();
				Объект.НастройкаToken = Чтение.ТекущееЗначение;
				Продолжить;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "refresh_token" Тогда
				Чтение.Прочитать();
				Объект.НастройкаRefreshToken = Чтение.ТекущееЗначение;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	Чтение = Неопределено;
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
	
	ПоказатьОповещениеПользователя(" Авторизация прошла успешно ! ");
  
КонецПроцедуры

// Получение новой пары токенов при помощи Refresh_Token
&НаКлиенте
Процедура Авторизация_Refresh_Token() 
	
	ПараметрыАвторизации = "grant_type=refresh_token&refresh_token=#REFRESH&client_id=#ID&client_secret=#SECRET";
	
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#REFRESH",URLEncode(Объект.НастройкаRefreshToken));
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#ID",URLEncode(Объект.НастройкаClientID));
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#SECRET",URLEncode(Объект.НастройкаCllientSecret));
	
	
	HTTP_Запрос = Новый HTTPЗапрос("/token");
	HTTP_Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTP_Запрос.УстановитьТелоИзСтроки(ПараметрыАвторизации,"CESU-8");
	
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	
	Отв=мСоединениеHTTPПерем.ОтправитьДляОбработки(HTTP_Запрос,ВременныйФайл);
	
	
	Если Отв.КодСостояния <> 200 Тогда 	   
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния,ВременныйФайл);
		// Удаление временного файла	
		Чтение = Неопределено;
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	   
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	
	// Чтение файла JSON 
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если Чтение.ТекущееЗначение = "access_token" Тогда
				Чтение.Прочитать();
				Объект.НастройкаToken = Чтение.ТекущееЗначение;
				Продолжить;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "refresh_token" Тогда
				Чтение.Прочитать();
				Объект.НастройкаRefreshToken = Чтение.ТекущееЗначение;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	Чтение = Неопределено;
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
	ПоказатьОповещениеПользователя("Авторизация прошла успешно !      ");
   
КонецПроцедуры

&НаСервере
Функция ЧтениеКлючаАПИ(Ключ)
   Возврат ХранилищеОбщихНастроек.Загрузить(СокрЛП(Ключ), "keyAPI");	
КонецФункции	

#КонецОбласти


#Область ПроцедурыОбработкиСобытийСменыСтраниц

// Страницы верхнего уровня
&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	
	
	Если ТекущаяСтраница.Имя = "ВыпискиБанка" Тогда
		
		Если Элементы.Выписки.ТекущаяСтраница.Имя = "ВыпискаПЛ" Тогда
			ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = мЗаголовокПодвалаВыпискиПерем;
		КонецЕсли;	  
		Если Элементы.Выписки.ТекущаяСтраница.Имя = "ВыпискаПТ" Тогда
			ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = мЗаголовокПодвалаТребовПерем;
		КонецЕсли;	  
		
		Возврат;
	КонецЕсли;
	
	
	Если ТекущаяСтраница.Имя = "СтраницаОтправкиВБанк" Тогда
		ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок =  мЗаголовокПодвалаПП;; 
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "СтраницаДокументы" Тогда
		
		Если Элементы.СтраницыДок.ТекущаяСтраница.Имя = "СтраницаДокументыДляПодписания" Тогда
			ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = мЗаголовокПодвалаПодпись;
		КонецЕсли;	  
		Если Элементы.СтраницыДок.ТекущаяСтраница.Имя = "СтраницаДокументыВБанке" Тогда
			ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = "";
		КонецЕсли;	  
		
		Возврат;
	КонецЕсли;
	
	
	ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = ""; 
	  
КонецПроцедуры

// Выписки
&НаКлиенте
Процедура ВыпискиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = ""; 
	
	Если ТекущаяСтраница.Имя = "ВыпискаПЛ" Тогда
		ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = мЗаголовокПодвалаВыпискиПерем;
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "ВыпискаПТ" Тогда
		ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = мЗаголовокПодвалаТребовПерем; 
	КонецЕсли;
	  
КонецПроцедуры

// Документы в банке
&НаКлиенте
Процедура СтраницыДокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = ""; 
	
	Если ТекущаяСтраница.Имя = "СтраницаДокументыДляПодписания" Тогда
		ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = мЗаголовокПодвалаПодпись;
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраница.Имя = "СтраницаДокументыВБанке" Тогда
		ЭтаФорма.Элементы.ДекорацияПодвал.Заголовок = ""; 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФункцииПреобразованияДанных


&НаКлиентеНаСервереБезКонтекста
Функция ДатаВJSON(Дата)
	
	//2019-09-16T22:00:00Z
   //2019-09-30T08:50:28.000Z
   ДатаJSON = Формат(Дата,"ДФ=yyyy-MM-dd");
   ДатаJSON = ДатаJSON + "T00:00:00.000Z"; 
   //ДатаJSON = ЗаписатьДатуJSON(Дата,ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.УниверсальнаяДата);
   //ДатаJSON = СтрЗаменить(ДатаJSON,"Z",".000Z");
   Возврат ДатаJSON; 
   
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЧислоВJSON(Сумма)
	
   СуммаСтрока = СокрЛП(Строка(Сумма));	
   СуммаСтрока = СтрЗаменить(СуммаСтрока,Символы.НПП,"");
   СуммаСтрока = СтрЗаменить(СуммаСтрока," ","");
   СуммаСтрока = СтрЗаменить(СуммаСтрока,",",".");
	
   Возврат СуммаСтрока; 
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВJSON(Текст)
	
   СтрокаВозврата = СокрЛП(Текст);
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.НПП,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВК,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ПС," ");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВТаб,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.Таб,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"""","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"»","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"«","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"›","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"‹","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"+","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,":"," ");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,";"," ");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"\"," ");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"/"," ");
   
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"{","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"}","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"[","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"]","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"^","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"'","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"&","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"@","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"=","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"?","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"$","");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"№","N");
	
   Возврат СтрокаВозврата; 
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерВJSON(Текст)
	
   СтрокаВозврата = СокрЛП(Текст);
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.НПП,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВК,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ПС,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВТаб,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.Таб,"");
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата," ","");
   
   пп = СтрНайти(СтрокаВозврата,"-");
   Если пп > 0 Тогда
	  СтрокаВозврата = Сред(СтрокаВозврата,пп+1); 
   КонецЕсли;	   
   СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"-","0");
   Если ПустаяСтрока(СтрокаВозврата) Тогда
	    СтрокаВозврата = "0";
   КонецЕсли;		
   	
   Возврат СтрокаВозврата; 
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатуJSON_ВДату(СДата)
	//2019-09-30T08:50:28.000Z
	стд = Лев(СДата,19);
	стд = СтрЗаменить(стд,"-","");
	стд = СтрЗаменить(стд,":","");
	стд = СтрЗаменить(стд,"T","");
	
	Возврат(Дата(стд));
КонецФункции	

&НаСервере
Функция ПолучитьСчетаСтрокой()
	
	рез = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.НомерСчета КАК НомерСчета
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Организация
		|	И БанковскиеСчета.Ссылка = &БанковскийСчет
		|	И БанковскиеСчета.db_ИспользуетсяDriveBank";
	
	Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И БанковскиеСчета.Ссылка = &БанковскийСчет", "");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		рез = рез + СокрЛП(Выборка.НомерСчета) + ",";
		
	КонецЦикла;
	
    рез = рез + "##";
	
	рез = СтрЗаменить(рез, ",##", "");
	
	возврат рез;
	
КонецФункции // ПОлучитьСчетаСтрокой()


&НаСервере
Функция ФормированиеСтрокиЗапроса(СтрокаЗапроса, Док, ТипФайлаПерем = "")
	
	Дата1 = ДатаВJSON(Объект.Период.ДатаНачала);
	Дата2 = ДатаВJSON(Объект.Период.ДатаОкончания);
	
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Дата1",Дата1);
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Дата2",Дата2);
	
	//{ГБСОФТ}
	//СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Тип", мТипФайлаПерем);
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Тип", ТипФайлаПерем);
	//{/ГБСОФТ}
	
	ПарамертСчета = Объект.БанковскийСчет;
	
	
	БанковскиеСчетаСтрокой = ПолучитьСчетаСтрокой();
	
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "#Счета", БанковскиеСчетаСтрокой);
	
	Значение = Объект.ВходящиеИсходящие;
	Парам = "0";
	Если  Значение = "Поступление" Тогда 
		Парам = "1"; 
	КонецЕсли;
	Если  Значение = "Списание" Тогда 
		Парам = "2";
	КонецЕсли;
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Опер",Парам);
	
	
	
	Значение = Объект.ТребованияАкцепт;	  
	Парам = "0";
	Если  Значение = "САкцептом" Тогда 
		Парам = "1"; 
	КонецЕсли;
	Если  Значение = "БезАкцепта" Тогда 
		Парам = "2";
	КонецЕсли;
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Акцепт",Парам);
	
	
	Возврат СтрокаЗапроса;	   

КонецФункции

&НаКлиенте
Функция ПреобразоватьвСистему(Число10,система)
	
	Если система > 36 ИЛИ система < 2 Тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 Цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное Тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
КонецФункции

&НаКлиенте
Функция URLEncode(Стр="")
	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		Если ((Знак>="a")и(Знак<="z")) ИЛИ
			((Знак>="A")и(Знак<="Z")) ИЛИ
			((Знак>="0")и(Знак<="9")) Тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Итог;	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыДляПечатиДокументов

// Выбор формата файла документа
 &НаКлиенте
Процедура ПечатьДокументов(Параметр)  
	
	ТипыФайлов = Новый СписокЗначений;
	ТипыФайлов.Добавить("PDF");
	ТипыФайлов.Добавить("MSWord");
	
	// процедура ПослеВыбораЭлемента определена ниже 	
	ОповещениеПослеВыбораЭлемента = Новый ОписаниеОповещения("ПослеВыбораЭлемента", ЭтотОбъект, Параметр);
	
	ТипыФайлов.ПоказатьВыборЭлемента(ОповещениеПослеВыбораЭлемента, "Выберите формат файла");
КонецПроцедуры

// Запрос печатной формы документа из Банка	
&НаКлиенте
Процедура ПослеВыбораЭлемента(Элемент, Параметр) Экспорт 
 
	Если Элемент <> Неопределено Тогда
		
		Если Элемент.Значение = "PDF" Тогда
			мТипФайлаПерем = "pdf";
		КонецЕсли;	
		Если Элемент.Значение = "MSWord" Тогда
			мТипФайлаПерем = "docx";
		КонецЕсли;	
		Если Элемент.Значение = "Exel" Тогда
			мТипФайлаПерем = "xlsx";
		КонецЕсли;	
		Если Элемент.Значение = "TXT" Тогда
			мТипФайлаПерем = "txt";
		КонецЕсли;	
		
		Если Параметр = "ПечатьВыписки" Тогда
			СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/accounts/statement/#Тип?number=#Счета&dateFrom=#Дата1&dateTo=#Дата2&transactions=#Опер&withApplications=false",11);
		КонецЕсли;	
		
		Если Параметр = "ПечатьПриложения" Тогда
			Если  Элементы.Список.ТекущиеДанные = Неопределено Тогда
				ПоказатьПредупреждение(, "Выберите документ для печати !", 0, " Внимание !");
				Возврат;
			КонецЕсли;	
			
			СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/accounts/application/#Тип?printId=#ПРИНТИД",2);
			
			Строка_ИД = Элементы.Список.ТекущиеДанные.ПринтИд;
			Строка_ИД = СтрЗаменить(Строка_ИД,Символы.НПП,"");
			Строка_ИД = СтрЗаменить(Строка_ИД," ","");
			
			СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "#ПРИНТИД", Строка_ИД);
		КонецЕсли;	
		
		Если Параметр = "ПечатьТребования" Тогда
			Если  Элементы.Требования.ТекущиеДанные = Неопределено Тогда
				ПоказатьПредупреждение(, "Выберите документ для печати !", 0, " Внимание !");
				Возврат;
			КонецЕсли;
			
			СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/documents/requirements/#ИД/#Тип",2);
			
			Строка_ИД = Элементы.Требования.ТекущиеДанные.ИД;
			Строка_ИД = СтрЗаменить(Строка_ИД,Символы.НПП,"");
			Строка_ИД = СтрЗаменить(Строка_ИД," ","");
			
			СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "#ИД", Строка_ИД);
		КонецЕсли;	 
		
		
		Если Параметр = "ПечатьСозданногоДокумента" Тогда
			Если  Элементы.СозданныеДокументы.ТекущиеДанные = Неопределено Тогда
				ПоказатьПредупреждение(, "Выберите документ для печати !", 0, " Внимание !");
				Возврат;
			КонецЕсли;	
			
			СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/documents/#ИД/#Тип",2);
			
			Строка_ИД = Элементы.СозданныеДокументы.ТекущиеДанные.ИД;
			Строка_ИД = СтрЗаменить(Строка_ИД,Символы.НПП,"");
			Строка_ИД = СтрЗаменить(Строка_ИД," ","");
			
			СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "#ИД", Строка_ИД);
		КонецЕсли;	 
		
		
		Если Параметр = "ПечатьДокументаВКартотеке" Тогда
			Если  Элементы.ДокументыВКартотеке.ТекущиеДанные = Неопределено Тогда
				ПоказатьПредупреждение(, "Выберите документ для печати !", 0, " Внимание !");
				Возврат;
			КонецЕсли;	
			
			СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/documents/catalog/#ИД/#Тип",2);
			
			Строка_ИД = Элементы.ДокументыВКартотеке.ТекущиеДанные.ИД;
			СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса, "#ИД", Строка_ИД);
		КонецЕсли;	 
		
		
		
		// Создание запроса
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Authorization","Bearer "+ЭтаФорма.Объект.НастройкаToken); 
		Запрос.Заголовки = ЗаголовокHTTP;
		
		ВременныйФайл =  ПолучитьИмяВременногоФайла(мТипФайлаПерем);
		
		// Выполнение запроса в банк
		Отв=мСоединениеHTTPПерем.Получить(Запрос,ВременныйФайл);
		
		Если Отв.КодСостояния <> 200 Тогда 	  
			СообщениеКодОтветаЗапроса(Отв.КодСостояния);	
			
			//Удаление временного файла
			Файл = Новый Файл(ВременныйФайл);
			Если Файл.Существует() Тогда
				УдалитьФайлы(ВременныйФайл);
			КонецЕсли; 
			
			Возврат;
		КонецЕсли;	 
		
		ЗапуститьПриложение(ВременныйФайл);
		
	КонецЕсли;
 
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьПараметрыПодключенияПоОрганизации(Организация)
	
	Отбор = Новый Структура("Организация", Организация);
	
	МассивСтрок = ТаблицаПараметровПодключения.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		рез = МассивСтрок[0].ПараметрыПодключения;
		
	Иначе
		
		рез = Неопределено;
		
	КонецЕсли;
	
	возврат рез;
	
КонецФункции


&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.СписокВидОперации.Видимость = ВыводДетальнойИнформации;
	Элементы.СписокРасчетныйСчетКонтрагента.Видимость = ВыводДетальнойИнформации;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Элементы.СписокСчетОрганизации.Видимость = Истина;
		
	Иначе	
		
		Элементы.СписокСчетОрганизации.Видимость = Ложь;
		
	КонецЕсли;	
	
	ЕстьДокументыВыписки = НЕ (Объект.Список.Количество() = 0);
	
	Элементы.ГруппаСтраницыВыписка.ТекущаяСтраница = ?(ЕстьДокументыВыписки, Элементы.ГруппаСтраницаВыписка, Элементы.ГруппаНетДокументовВВыписке);
	
КонецПроцедуры // УстановитьВидимость()

#Область БанковскиеВыписки

&НаСервере
Процедура ОпределитьКонтрагента(СтрокаВыписки)
	
	МассивКонтрагентов = db_ИнтерфейсыСервер.ПолучитьСписокКонтрагентов(СтрокаВыписки.УНП);
	
	Количество = МассивКонтрагентов.Количество();
	
	Если Количество > 0 Тогда
		
		СтрокаВыписки.КонтрагентСсылка = МассивКонтрагентов[0];
		
		Если НЕ Количество = 1 Тогда
		
			СтрокаВыписки.СтатусКонтрагента = 1;
			
		КонецЕсли;	
		
		
	Иначе
		
		СтрокаВыписки.СтатусКонтрагента = 2;
		
	КонецЕсли;
	
	
КонецПроцедуры // ОпределитьКонтрагента()

&НаСервере
Процедура ОпределитьДокументПоступления(СтрокаВыписки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПоступлениеНаСчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаСчет КАК ПоступлениеНаСчет
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПоступлениеНаСчет.Дата, ДЕНЬ) = &Дата
		|	И ПоступлениеНаСчет.db_Ключ = &db_Ключ
		|	И НЕ ПоступлениеНаСчет.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("db_Ключ", СтрокаВыписки.db_Ключ);
	Запрос.УстановитьПараметр("Дата", НачалоДня(СтрокаВыписки.Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаВыписки.ДокументСсылка = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьКонтрагента()

&НаСервере
Процедура ОпределитьДокументСписания(СтрокаВыписки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасходСоСчета.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасходСоСчета КАК РасходСоСчета
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(РасходСоСчета.Дата, ДЕНЬ) = &Дата
		|	И РасходСоСчета.db_Ключ = &db_Ключ
		|	И НЕ РасходСоСчета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("db_Ключ", СтрокаВыписки.db_Ключ);
	Запрос.УстановитьПараметр("Дата", НачалоДня(СтрокаВыписки.Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаВыписки.ДокументСсылка = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьКонтрагента()

&НаСервере
Процедура ОпределитьПлатежныйДокумент(СтрокаВыписки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПлатежноеПоручение.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, ДЕНЬ) = &Дата
		|	И ПлатежноеПоручение.db_Ключ = &db_Ключ
		|	И НЕ ПлатежноеПоручение.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("db_Ключ", СтрокаВыписки.db_Ключ);
	Запрос.УстановитьПараметр("Дата", НачалоДня(СтрокаВыписки.Дата));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтрокаВыписки.ПлатежноеПоручениеСсылка = Выборка.Ссылка;
		
		СписокОпределенныхПП.Добавить(Выборка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры // ОпределитьКонтрагента()

&НаСервере
Процедура ОпределитьДокумент(СтрокаВыписки)
	
	
	Если СтрокаВыписки.Поступление > 0 Тогда
		
		ОпределитьДокументПоступления(СтрокаВыписки);
		
	Иначе
		
		ОпределитьПлатежныйДокумент(СтрокаВыписки);
		ОпределитьДокументСписания(СтрокаВыписки);
		
	КонецЕсли;
	
	ЗаполненДокументБанка = ЗначениеЗаполнено(СтрокаВыписки.ДокументСсылка);
	ЗаполненоПП = ЗначениеЗаполнено(СтрокаВыписки.ПлатежноеПоручениеСсылка) И СтрокаВыписки.Списание > 0;
	
	Если НЕ ЗаполненДокументБанка И Не ЗаполненоПП Тогда
	
		СтрокаВыписки.СтатусДокумента = 7;
		
	ИначеЕсли ЗаполненДокументБанка И НЕ ЗаполненоПП Тогда
	
		СтрокаВыписки.СтатусДокумента = 2;
	
	ИначеЕсли НЕ ЗаполненДокументБанка И ЗаполненоПП Тогда
	
		СтрокаВыписки.СтатусДокумента = 3;
	
		
	ИначеЕсли СтрокаВыписки.ДокументСсылка.Проведен Тогда
		
		СтрокаВыписки.СтатусДокумента = 0;
		
	Иначе
		
		СтрокаВыписки.СтатусДокумента = 1;
	
	КонецЕсли;
	
КонецПроцедуры // ОпределитьКонтрагента()

&НаСервере
Процедура ОпределитьБанковскийСчет(СтрокаВыписки)
	
	СтрокаВыписки.СчетОрганизацииСсылка = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", СтрокаВыписки.СчетОрганизации,, Объект.Организация);
	
КонецПроцедуры // ОпределитьБанковскийСчет()

&НаСервере
Процедура СформироватьКлюч(СтрокаВыписки)
	
	// Состав ключа:
	// БанковскийСчет
	// Сумма
	// "+" или "-" взависимости от приход/расход
	// ИНН (УНП) контрагента
	// НомерДокумента - 
	// ДатаДокумента
	// ДатаОперации - дата проведения по банку
	
	рез = "";
	
	рез = рез + СокрЛП(СтрокаВыписки.СчетОрганизации);
	рез = рез + СокрЛП(СтрокаВыписки.Поступление + СтрокаВыписки.Списание);
	рез = рез + ?(СтрокаВыписки.Списание > 0, "-", "+");
	рез = рез + СокрЛП(СтрокаВыписки.УНП);
	рез = рез + СокрЛП(СтрокаВыписки.ВходящийНомер);
	рез = рез + СокрЛП(СтрокаВыписки.ВходящаяДата);
	рез = рез + СокрЛП(СтрокаВыписки.Дата);
	
	СтрокаВыписки.db_Ключ = рез;
	
КонецПроцедуры // ОпределитьКонтрагента()


&НаСервере
Процедура ЗаполнитьНеотправленныеПП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлатежноеПоручение.db_Ключ КАК db_Ключ,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.Номер КАК ВходящийНомер,
	|	ПлатежноеПоручение.СуммаДокумента КАК Списание,
	|	ПлатежноеПоручение.Контрагент КАК Контрагент,
	|	ПлатежноеПоручение.ИННПолучателя КАК УНП,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.Оплачено КАК Оплачено,
	|	ПлатежноеПоручение.Ссылка КАК ПлатежноеПоручениеСсылка,
	|	ПлатежноеПоручение.Дата КАК ВходящаяДата,
	|	0 КАК СтатусКонтрагента,
	|	8 КАК СтатусДокумента,
	|	Истина КАК ИсходящийДокумент,
	|	ПлатежноеПоручение.БанковскийСчет КАК СчетОрганизацииСсылка,
	|	ПлатежноеПоручение.БанковскийСчет.НомерСчета КАК СчетОрганизации,
	|	ПлатежноеПоручение.СчетКонтрагента КАК БанковскийСчетКонтрагентаСсылка,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК РасчетныйСчетКонтрагента
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И НЕ ПлатежноеПоручение.Оплачено
	|	И ПлатежноеПоручение.Дата Между &ДатаНачала И &ДатаОкончания
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.Ссылка В (&СписокПП)";
	
	
	Запрос.УстановитьПараметр("СписокПП", СписокОпределенныхПП);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Д_Начало));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Д_Окончание));
	
	Если Элементы.ВсеИсходящие.Пометка Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ПлатежноеПоручение.Дата Между &ДатаНачала И &ДатаОкончания", "");
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Список.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.НазначениеПлатежа = СтрЗаменить(НоваяСтрока.НазначениеПлатежа, Символы.ПС, " ");
		НоваяСтрока.ВходящийНомер = НомерВJSON(НоваяСтрока.ВходящийНомер);
		
	КонецЦикла;
	
	
КонецПроцедуры // ЗаполнитьНеопртравленныеПП()

&НаСервере
Процедура ЗаполнитьСсылкиНаОбъектыИБ(Выписка, Исходящие)
	
	СписокОпределенныхПП.Очистить();
	
	Для Каждого СтрокаВыписки Из Объект.Список Цикл
		
		СформироватьКлюч(СтрокаВыписки);
		
		ОпределитьКонтрагента(СтрокаВыписки);
		ОпределитьДокумент(СтрокаВыписки);
		
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			
			СтрокаВыписки.СчетОрганизацииСсылка = Объект.БанковскийСчет;
			
		Иначе
			
			ОпределитьБанковскийСчет(СтрокаВыписки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Исходящие Тогда
	
		ЗаполнитьНеотправленныеПП();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСсылкиНаОбъектыИБ()

&НаСервере
Процедура ОбработатьВыпискуНаСервере(Выписка, Исходящие)
	
	ЗаполнитьСсылкиНаОбъектыИБ(Выписка, Исходящие);
	
КонецПроцедуры // ОбработатьВыпискуНаСервере()

// Загрузка выписки банка по платежным поручениям 
&НаКлиенте
Процедура Загрузить(Выписка, Исходящие) 
	
	Объект.Список.Очистить(); 
	
	Если Выписка Тогда
	
		ПараметрыСоединения = ПолучитьПараметрыПодключенияПоОрганизации(Объект.Организация);
		
		Если ПараметрыСоединения = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/accounts/statement/?number=#Счета&dateFrom=#Дата1&dateTo=#Дата2&pageNo=0&pageRowCount=0&transactions=#Опер",1);
		
		Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
		
		ЗаголовокHTTP = Новый Соответствие();
		ЗаголовокHTTP.Вставить("Authorization","Bearer " + ПараметрыСоединения.Token); 
		Запрос.Заголовки = ЗаголовокHTTP;
		
		ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
		// Выполнение GET запроса в банк
		Отв = мСоединениеHTTPПерем.Получить(Запрос,ВременныйФайл);
		
		Если Отв.КодСостояния <> 200 Тогда 
			
			СообщениеКодОтветаЗапроса(Отв.КодСостояния,ВременныйФайл);
			
			// Удаление временного файла
			Файл = Новый Файл(ВременныйФайл);
			Если Файл.Существует() Тогда
				УдалитьФайлы(ВременныйФайл);
			КонецЕсли; 
			
			Возврат;
			
		КонецЕсли;	   
		
		Чтение = Новый ЧтениеJSON;
		Чтение.ОткрытьФайл(ВременныйФайл);
		
		
		// Переменные
		НоваяСтрока = Неопределено;
		ДК = "";
		ИмяОбъекта = "";
		
		Выписка = ПрочитатьJSON(Чтение);
		Для Каждого Строка Из Выписка.page Цикл
			
			НоваяСтрока = Объект.Список.Добавить();
			НоваяСтрока.СчетОрганизации = Строка.number;
			НоваяСтрока.Контрагент = Строка.corrName;
			НоваяСтрока.УНП = Строка.corrUnp;
			НоваяСтрока.ВидОперации = Строка.operCodeName;
			НоваяСтрока.РасчетныйСчетКонтрагента = Строка.corrNumber;
			
			Если Строка.operType = "C" Тогда
				
				НоваяСтрока.Поступление = Строка.amount;
				НоваяСтрока.ПоступлениеСписание = 0;
				
			Иначе
				
				НоваяСтрока.Списание = Строка.amount;
				НоваяСтрока.ПоступлениеСписание = 1;
				
			КонецЕсли;
			
			НоваяСтрока.НазначениеПлатежа = Строка.purpose;
			новаяСтрока.ВидОперации = Строка.operCodeName;
			
			НоваяСтрока.ВходящаяДата = ДатуJSON_ВДату(Строка.operDate);
			НоваяСтрока.Дата = ДатуJSON_ВДату(Строка.acceptDate);
			НоваяСтрока.ВходящийНомер = Строка.docNum;
			НоваяСтрока.СтатусСтроки = "Проведен";
			
		КонецЦикла;
		
		
		ОстатокНаНачало = 0;
		ОстатокНаКонец = 0;
		Приход = 0;
		Расход = 0;
		
		Для Каждого СтрокаОстатки ИЗ Выписка.statistics Цикл
			
			ОстатокНаНачало = ОстатокНаНачало + СтрокаОстатки.openingBalance;
			ОстатокНаКонец = ОстатокНаКонец + СтрокаОстатки.closingBalance;
			Приход = Приход + СтрокаОстатки.crAmount;
			Расход = Расход + СтрокаОстатки.dbAmount;
			
		КонецЦикла;
			
		Объект.НаНачалоДня = ОстатокНаНачало;
		Объект.НаКонецДня = ОстатокНаКонец;
		Объект.Поступило = Приход;
		Объект.Списано = Расход;
		
		//Удаление временного файла	
		Чтение = Неопределено;
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
	КонецЕсли;
	
	ОбработатьВыпискуНаСервере(Выписка, Исходящие);
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Выписка = Элементы.Выписка.Пометка ИЛИ Элементы.ВсеДокументы.Пометка;
	Исходящие = Элементы.Исходящие.Пометка ИЛИ Элементы.ВсеДокументы.Пометка;
	
	Загрузить(Выписка, Исходящие);
	
	ПолучитьСписокСуществующихДокументов();
	
КонецПроцедуры


// Загрузка из банка входящих платежных требований
&НаКлиенте
Процедура ЗагрузитьТребования(Команда) 
	
	Объект.Требования.Очистить(); 
	мЗаголовокПодвалаТребовПерем = "";
	
	СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/documents/requirements?number=#Счета&pageNo=0&pageRowCount=0&dateFrom=#Дата1&dateTo=#Дата2&type=#Акцепт",2);
	
	Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Authorization","Bearer "+Объект.НастройкаToken); 
	Запрос.Заголовки = ЗаголовокHTTP;
	
	
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	
	Отв=мСоединениеHTTPПерем.Получить(Запрос,ВременныйФайл);
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		// Удаление временного файла	
		Чтение = Неопределено;
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния);	  
		Возврат;
	КонецЕсли;	   
	
	
	
	Если Объект.БанковскийСчет = "ВсеСчета" Тогда
		ЭтотОбъект.Элементы.ТребованияСчетОрганизации.Видимость = Истина;
	Иначе	
		ЭтотОбъект.Элементы.ТребованияСчетОрганизации.Видимость = Ложь;
	КонецЕсли;	   
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	
	НоваяСтрока = NULL;
	ИмяОбъекта = "";
	КолЗаписей = 0;
	
	Пока Чтение.Прочитать() Цикл
		
		ТипС= Чтение.ТипТекущегоЗначения;
		
		
		Если ТипС = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если Чтение.ТекущееЗначение = "page" Тогда
				ИмяОбъекта = "page";
				Продолжить;
			КонецЕсли;
			
			
			Если Чтение.ТекущееЗначение = "totalRowCount" Тогда
				Чтение.Прочитать();
				КолЗаписей = Чтение.ТекущееЗначение;
				Если КолЗаписей = 0 Тогда
					
					// Удаление временного файла	
					Чтение = Неопределено;
					Файл = Новый Файл(ВременныйФайл);
					Если Файл.Существует() Тогда
						УдалитьФайлы(ВременныйФайл);
					КонецЕсли; 
					
					Возврат;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;	   
			
			
			
			Если ИмяОбъекта = "page" Тогда
				
				Если Чтение.ТекущееЗначение = "id" Тогда
					Чтение.Прочитать();
					НоваяСтрока = Объект.Требования.Добавить();
					НоваяСтрока.Ид = Чтение.ТекущееЗначение;			 
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "date" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Дата = ДатуJSON_ВДату(Чтение.ТекущееЗначение);					
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "num" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Номер = Чтение.ТекущееЗначение;			 
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "typeName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Тип = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "statusName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Статус = Чтение.ТекущееЗначение;	
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "number" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СчетОрганизации = Чтение.ТекущееЗначение;	
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Контрагент = Чтение.ТекущееЗначение;					
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrUnp" Тогда
					Чтение.Прочитать();
					НоваяСтрока.УНП = Чтение.ТекущееЗначение;					
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrNumber" Тогда
					Чтение.Прочитать();
					НоваяСтрока.РасчетныйСчет = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "amount" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Сумма = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "restAmount" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СуммаОстаток = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "currIso" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Валюта = Чтение.ТекущееЗначение;
				КонецЕсли;
				
			КонецЕсли; 
			
			
		КонецЕсли;	   		   
	КонецЦикла;	   
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВыписки(Команда) 
	     
     ПечатьДокументов(Команда.Имя);	

 КонецПроцедуры
 
 // Печать текущего документа из выписки
 &НаКлиенте
Процедура ПечатьПриложения(Команда)
	ПечатьДокументов(Команда.Имя);
КонецПроцедуры

 // Печать текущего документа из списка требований
 &НаКлиенте
 Процедура ПечатьТребования(Команда)
	 
	ПечатьДокументов(Команда.Имя);
	
КонецПроцедуры

// Прием банковской выписки по счету
&НаКлиенте
Процедура ЗаписатьВыписку(Команда)
	
	Если Объект.Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Объект.БанковскийСчет) = "ВсеСчета" Тогда
		ПоказатьПредупреждение(, "Выберите счет организации, для которого принимается выписка." , 0, "Внимание !");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(Объект.БанковскийСчет)) <> 28 Тогда
		ПоказатьПредупреждение(, "Длина счета не равна 28." , 0, "Внимание !");
		Возврат;
	КонецЕсли;
	
	Данные = ПоискОрганизации(Объект.НастройкаУНП,Объект.БанковскийСчет);
	Если Данные = Неопределено Тогда
		ПоказатьПредупреждение(, "Не найден счет организации  "+Объект.БанковскийСчет , 0, "Внимание !");
		Возврат;
	КонецЕсли;	
	
	
	
	ПП = "";
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	ВременныйФайл = Сред(ВременныйФайл, 1,СтрНайти(ВременныйФайл, "\", НаправлениеПоиска.СКонца))+"kl_to_1c.txt";
	
	
	Файл = Новый ЗаписьТекста(ВременныйФайл,КодировкаТекста.ANSI);
	
	Файл.ЗаписатьСтроку("^Type=400^"+ПП);
	Файл.ЗаписатьСтроку("^Header4=" + СокрЛП(Объект.БанковскийСчет)+" "+ "933"+"^"+ПП);
	Файл.ЗаписатьСтроку("^DATEIN=" +  Формат(Объект.Период.ДатаНачала,"ДФ=dd/MM/yyyy")+"^"+ПП);
	
	НаНачалоДеб = Объект.НаНачалоДня;
	НаНачалоКред = 0;	
	
	Файл.ЗаписатьСтроку("^DEBIN=" + ЧислоВJSON(НаНачалоДеб)+"^" +ПП);
	// Конец заголовка
	Файл.ЗаписатьСтроку("^DATE=" +  Формат(Объект.Период.ДатаНачала,"ДФ=dd/MM/yyyy")+"^"+ПП); 
	
	
	
	Для каждого стр из Объект.Список Цикл
		
		Файл.ЗаписатьСтроку("^DOCDATE="+Формат(стр.ВходящаяДата,"ДФ=dd/MM/yyyy")+"^"+ПП);		
		Файл.ЗаписатьСтроку("^Num="+СокрЛП(стр.ВходящийНомер)+"^"+ПП);
		Файл.ЗаписатьСтроку("^KorName="+СокрЛП(стр.Контрагент)+"^"+ПП);		
		Файл.ЗаписатьСтроку("^DB="+ЧислоВJSON(Строка(стр.Списание))+"^"+ПП);
		Файл.ЗаписатьСтроку("^CREDIT="+ЧислоВJSON(Строка(стр.Поступление))+"^"+ПП);
		
		Файл.ЗаписатьСтроку("^UNNKORR="+СокрЛП(стр.УНП)+"^"+ПП);
		Файл.ЗаписатьСтроку("^Acc="+СокрЛП(стр.РасчетныйСчетКонтрагента)+"^"+ПП);
		
		Файл.ЗаписатьСтроку("^Nazn="+СокрЛП(стр.НазначениеПлатежа)+"^"+ПП);
		// Конец документа
		Файл.ЗаписатьСтроку("^Nazn2=^"+ПП); 
		
	КонецЦикла;	
	
	
	Файл.ЗаписатьСтроку("^DateOut=" +  Формат(Объект.Период.ДатаОкончания,"ДФ=dd/MM/yyyy")+"^"+ПП);
	
	НаКонецДеб = Объект.НаКонецДня;
	НаКонецКред = 0;
	
	Файл.ЗаписатьСтроку("^DebOut=" + ЧислоВJSON(НаКонецДеб)+"^" +ПП);
	
	// Конец Файла
	Файл.ЗаписатьСтроку("###############");	
	Файл.Закрыть();
	
	
	
	// Открытие типовой формы приема выписки
	ПараметрыЗагрузки = Новый Структура;
	ПараметрыЗагрузки.Вставить("РежимПоУмолчанию", "ГруппаЗагрузка");
	ПараметрыЗагрузки.Вставить("Организация",      Данные.Организация);
	ПараметрыЗагрузки.Вставить("БанковскийСчет",   Данные.Счет);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыЗагрузки, ЭтаФорма);
	
КонецПроцедуры

// Поиск организации по УНП и номеру счета, используется при приеме выписки по счету 
&НаСервере
Функция ПоискОрганизации(УНП,НомерСчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Владелец.Ссылка КАК Организация,
	|	БанковскиеСчета.Ссылка КАК Счет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец.ИНН = &ИНН";
	
	Запрос.УстановитьПараметр("ИНН", УНП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Данные = Новый Структура;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если СокрЛП(НомерСчета) = СокрЛП(ВыборкаДетальныеЗаписи.НомерСчета) Тогда
			Данные.Вставить("Счет",ВыборкаДетальныеЗаписи.Счет);
			Данные.Вставить("Организация",ВыборкаДетальныеЗаписи.Организация);
			Возврат Данные;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	


// Обработчик изменения типа требования
&НаКлиенте
Процедура ТребованияАкцептПриИзменении(Элемент)
	ЗагрузитьТребования(Команды.ЗагрузитьТребования);
КонецПроцедуры

// Вызов процедур загрузки при изменении реквизитов формы 
&НаКлиенте
Процедура ЗагрузкаПриИзмененииРеквизитов()
	
	Выписка = Элементы.Выписка.Пометка ИЛИ Элементы.ВсеДокументы.Пометка;
	Исходящие = Элементы.Исходящие.Пометка ИЛИ Элементы.ВсеДокументы.Пометка;
	
	Загрузить(Выписка, Исходящие);
	ПолучитьСписокСуществующихДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПлатежейВБанк





#КонецОбласти

#Область ПодписаниеПлатежей

// Загрузка документов на подписание
&НаКлиенте
Процедура ДокументыДляПодписания(Команда)
	
	СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/documents/signs/?number=#Счета&pageNo=0&pageRowCount=0&dateFrom=#Дата1&dateTo=#Дата2&type=",3);
	
	Дата11 = ДатаВJSON(Объект.Д_Начало);
	Дата22 = ДатаВJSON(Объект.Д_Окончание);		   
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Дата1",Дата11);
	СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Дата2",Дата22);		         		
	
	СтрокаЗапроса = ФормированиеСтрокиЗапроса(СтрокаЗапроса,3);
	
	HTTP_Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer "+Объект.НастройкаToken); 
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	Отв = мСоединениеHTTPПерем.Получить(HTTP_Запрос,ВременныйФайл);
	
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния,ВременныйФайл);
		
		// Удаление временного файла
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	Объект.ДокументыДляПодписания.Очистить();
	
	// Переменные
	НоваяСтрока = Неопределено;
	Раздел = "";
	
	// Чтение файла JSON
	Пока Чтение.Прочитать() Цикл
				
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
						
			Если Чтение.ТекущееЗначение = "page" Тогда
				Раздел = "";
				Продолжить;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "params" Тогда
				Раздел = "Params";
				Продолжить;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "totalRowCount" Тогда
				Раздел = "";
				Продолжить;
			КонецЕсли;	   
			
						
			Если Чтение.ТекущееЗначение = "id" Тогда
				Чтение.Прочитать();
				НоваяСтрока = Объект.ДокументыДляПодписания.Добавить();
				НоваяСтрока.ИД = Чтение.ТекущееЗначение;
				Раздел = "ИД";
			КонецЕсли;
			
			Если Раздел = "ИД" Тогда	   
				Если Чтение.ТекущееЗначение = "creationDate" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ДатаСоздания = ДатуJSON_ВДату(Чтение.ТекущееЗначение);
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "date" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ДатаДокумента = ДатуJSON_ВДату(Чтение.ТекущееЗначение);
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "num" Тогда
					Чтение.Прочитать();
					НоваяСтрока.НомерДокумента = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "type" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ТипДок = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "typeName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ТипДокНаименование = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "subType" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ПодтипДок = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "subTypeName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ПодтипДокНаименование = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "status" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СтатусДокумента = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "statusName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СтатусНаименование = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "answer" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ОтветБанка = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "name" Тогда
					Чтение.Прочитать();
					НоваяСтрока.НаименованиеОтправителя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "number" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СчетОтправителя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "bic" Тогда
					Чтение.Прочитать();
					НоваяСтрока.КодБанкаОтправителя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "bank" Тогда
					Чтение.Прочитать();
					НоваяСтрока.БанкОтправительНаименование = Чтение.ТекущееЗначение;
				КонецЕсли;
			КонецЕсли;	
			
			
			Если Раздел = "Params" Тогда	
				
				Если Чтение.ТекущееЗначение = "name" Тогда
					
					Чтение.Прочитать();
					Если Чтение.ТекущееЗначение = "amount" Тогда
						Чтение.Прочитать();
						Чтение.Прочитать();
						НоваяСтрока.Сумма = Чтение.ТекущееЗначение;
					КонецЕсли;
					Если Чтение.ТекущееЗначение = "currIso" Тогда
						Чтение.Прочитать();
						Чтение.Прочитать();
						НоваяСтрока.КодВалюты = Чтение.ТекущееЗначение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
			
		КонецЕсли; 
	КонецЦикла;	   
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияПодписания(Команда)
	
	Если Объект.ДокументыДляПодписания.Количество() = 0 Тогда
		
		Возврат;	
		
	КонецЕсли;		
	
	
	Массив_ИД = "";
	Для каждого Стр из Объект.ДокументыДляПодписания Цикл
		Если НЕ Стр.Отметка Тогда
			Продолжить;
		КонецЕсли;	
		Массив_ИД = Массив_ИД + ?(ПустаяСтрока(Массив_ИД),"",",") + Строка(Стр.ИД);
	КонецЦикла;	
	
	Если СтрДлина(Массив_ИД) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Массив_ИД = СтрЗаменить(Массив_ИД," ","");
	Массив_ИД = СтрЗаменить(Массив_ИД,Символы.НПП,"");
	
	
	
	HTTP_Запрос = Новый HTTPЗапрос("/partner/1.0.0/documents/signs/initialize");
	HTTP_Запрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer "+Объект.НастройкаToken); 	
	
	
	ДанныеЗапроса = "{
	|""queryIds"": [#Массив_ИД],
	|""redirectUrl"": ""test.com""
	|}";
	
	
	
	ДанныеЗапроса = СтрЗаменить(ДанныеЗапроса,"#Массив_ИД",Массив_ИД);
	
	HTTP_Запрос.УстановитьТелоИзСтроки(ДанныеЗапроса, "CESU-8");
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	
	Отв=мСоединениеHTTPПерем.ОтправитьДляОбработки(HTTP_Запрос,ВременныйФайл);
	
	
	
	Если Отв.КодСостояния <> 200 Тогда 	   
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния);
		
		// Удаление временного файла	
		Чтение = Неопределено;
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	   
		
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	// Чтение файла JSON
	Тикет = "";
	Пока Чтение.Прочитать() Цикл	   
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если Чтение.ТекущееЗначение = "ticket" Тогда
				Чтение.Прочитать();
				Тикет = Чтение.ТекущееЗначение;										
			КонецЕсли;
		КонецЕсли;	   
	КонецЦикла;	   
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
	
	СтрокаЗапроса = СтрЗаменить("/partner/1.0.0/documents/signs/verify?ticket=#Ticket","#Ticket",Тикет);
		
	
	Если мТипБраузера = 1 Тогда
		
		//Браузер по умолчанию
	 	ЗапуститьПриложение("https://developerhub.alfabank.by:8273"+СтрокаЗапроса);
		
	КонецЕсли;
	
	Если мТипБраузера = 2 Тогда
		
		//Подпись в 1С
		СтруктураПодпись = Новый Структура("АдресСтраницы", "https://developerhub.alfabank.by:8273"+СтрокаЗапроса);	
		ОткрытьФорму("Обработка.КлиентАльфаБанк.Форма.ФормаПодписи",Новый Структура("Подпись", СтруктураПодпись),ЭтаФорма);	
		
	КонецЕсли;
   	
КонецПроцедуры

//Отметка платежей на подписание
&НаКлиенте
Процедура УстановитьОтметки(Команда)
	
	Для Каждого Стр Из Объект.ДокументыДляПодписания Цикл
		Стр.Отметка = Истина;	
	КонецЦикла;
	

КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметки(Команда)
	
	Для Каждого Стр Из Объект.ДокументыДляПодписания Цикл
		Стр.Отметка = Ложь;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДляПодписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДляПодписанияПриИзменении(Элемент)
	
	
КонецПроцедуры

#КонецОбласти

#Область ДокументыВКартотеке

&НаКлиенте
Процедура ДокументыВКартотеке(Команда)
	
	СтрокаЗапроса = ФормированиеСтрокиЗапроса("/partner/1.0.0/documents/catalog?numbe=#Счета&pageNo=0&pageRowCount=0&dateFrom=#Дата1&dateTo=#Дата2&type=0",3);
	
	HTTP_Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer "+Объект.НастройкаToken); 
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	Отв = мСоединениеHTTPПерем.Получить(HTTP_Запрос,ВременныйФайл); 
	
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния);
		
		// Удаление временного файла
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	
	Объект.ДокументыВКартотеке.Очистить();
	
	// Переменные
	НоваяСтрока = Неопределено;
	Раздел = "";
	
	// Чтение файла JSON
	Пока Чтение.Прочитать() Цикл
				
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			
			Если Чтение.ТекущееЗначение = "page" Тогда
				Раздел = "";
				Продолжить;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "totalRowCount" Тогда
				Раздел = "";
				Продолжить;
			КонецЕсли;	   
						
			
			Если Чтение.ТекущееЗначение = "id" Тогда
				Чтение.Прочитать();
				НоваяСтрока = Объект.ДокументыВКартотеке.Добавить();
				НоваяСтрока.ИД = Чтение.ТекущееЗначение;
				Раздел = "ИД";
			КонецЕсли;
			
			Если Раздел = "ИД" Тогда	   
				Если Чтение.ТекущееЗначение = "date" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ДатаДокумента = ДатуJSON_ВДату(Чтение.ТекущееЗначение);					
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "num" Тогда
					Чтение.Прочитать();
					НоваяСтрока.НомерДокумента = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "type" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ТипДок = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "typeName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ТипДокНаименование = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "status" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СтатусДокумента = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "statusName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СтатусНаименование = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "number" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СчетОтправителя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrName" Тогда
					Чтение.Прочитать();
					НоваяСтрока.НаименованиеПолучателя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrUnp" Тогда
					Чтение.Прочитать();
					НоваяСтрока.УНППолучателя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrNumber" Тогда
					Чтение.Прочитать();
					НоваяСтрока.СчетПолучателя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrBic" Тогда
					Чтение.Прочитать();
					НоваяСтрока.КодБанкаПолучателя = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "corrBank" Тогда
					Чтение.Прочитать();
					НоваяСтрока.БанкПолучателяНаименование = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "amount" Тогда
					Чтение.Прочитать();
					НоваяСтрока.Сумма = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "restAmount" Тогда
					Чтение.Прочитать();
					НоваяСтрока.ОстатокКОплате = Чтение.ТекущееЗначение;
				КонецЕсли;
				Если Чтение.ТекущееЗначение = "currIso" Тогда
					Чтение.Прочитать();
					НоваяСтрока.КодВалюты = Чтение.ТекущееЗначение;
				КонецЕсли;
				
			КонецЕсли;				
			
		КонецЕсли; 	
			
	КонецЦикла;	  
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
КонецПроцедуры

// Печатная форма документа в картотеке
&НаКлиенте
Процедура ПечатьДокументаВКартотеке(Команда) 
	
	ПечатьДокументов(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВКартотекеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область КурсыВалютНаТекущуюДату

&НаКлиенте
Процедура КурсыВалютБанка(Команда)
	
	СтрокаЗапроса = "/partner/1.0.0/public/rates";       	   	   
	HTTP_Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	Отв = мСоединениеHTTPПерем.Получить(HTTP_Запрос,ВременныйФайл); 
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния);
		
		// Удаление временного файла
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	Объект.КурсыВалютБанк.Очистить();
	
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			
			Если Чтение.ТекущееЗначение = "sellRate" Тогда
				НоваяСтрока = Объект.КурсыВалютБанк.Добавить();
			КонецЕсли;
			
			
			Если Чтение.ТекущееЗначение = "sellRate" Тогда
				Чтение.Прочитать();				
				НоваяСтрока.КурсПродажи = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "sellIso" Тогда
				Чтение.Прочитать();
				НоваяСтрока.ВалютаПрод = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "sellCode" Тогда
				Чтение.Прочитать();
				НоваяСтрока.ВалютаПродКод = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "buyRate" Тогда
				Чтение.Прочитать();
				НоваяСтрока.КурсПокупки = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "buyIso" Тогда
				Чтение.Прочитать();
				НоваяСтрока.ВалютаПокуп = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "buyCode" Тогда
				Чтение.Прочитать();
				НоваяСтрока.ВалютаПокупКод = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "quantity" Тогда
				Чтение.Прочитать();
				НоваяСтрока.КоличествоВалюты = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "name" Тогда
				Чтение.Прочитать();
				НоваяСтрока.НаименованиеВалюты = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "date" Тогда
				Чтение.Прочитать();
				НоваяСтрока.НаДату = ДатуJSON_ВДату(Чтение.ТекущееЗначение);
			КонецЕсли;
			
			
		КонецЕсли; 	
		
		
	КонецЦикла;	  
	
	
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура КурсыВалютНацБанка(Команда)
	
	СтрокаЗапроса = "partner/1.0.0/public/nationalRates";
	
	HTTP_Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	Отв = мСоединениеHTTPПерем.Получить(HTTP_Запрос,ВременныйФайл); 
	
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния);
		
		// Удаление временного файла
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	Объект.КурсыНацбанка.Очистить();
	
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			
			Если Чтение.ТекущееЗначение = "rates" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Чтение.ТекущееЗначение = "rate" Тогда
				НоваяСтрока = Объект.КурсыНацбанка.Добавить();
			КонецЕсли;
			
			Если Чтение.ТекущееЗначение = "rate" Тогда
				Чтение.Прочитать();				
				НоваяСтрока.Курс = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "iso" Тогда
				Чтение.Прочитать();
				НоваяСтрока.Валюта = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "code" Тогда
				Чтение.Прочитать();
				НоваяСтрока.КодВалюты = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "quantity" Тогда
				Чтение.Прочитать();
				НоваяСтрока.Количество = Чтение.ТекущееЗначение;
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "date" Тогда
				Чтение.Прочитать();
				НоваяСтрока.НаДату = ДатуJSON_ВДату(Чтение.ТекущееЗначение);				
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "name" Тогда
				Чтение.Прочитать();
				НоваяСтрока.НаименованиеВалюты = Чтение.ТекущееЗначение;
			КонецЕсли;
			
			
		КонецЕсли; 	
		
		
	КонецЦикла;	  
	
	
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииИзБанка

// Получение информации о зарегистрированном пользователе
&НаКлиенте
Процедура ИнформаияОрганизации(Команда)
	
	СтрокаЗапроса = "/partner/1.0.0/user/profile";
	
	HTTP_Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer "+Объект.НастройкаToken); 
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	Отв = мСоединениеHTTPПерем.Получить(HTTP_Запрос,ВременныйФайл); 
	
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния);
		
		// Удаление временного файла
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	
	Информация = Новый Структура;
	
	
	// Чтение файла JSON
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда		   
			
			Если Чтение.ТекущееЗначение = "firstName" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Имя_пользователя",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "patronymic" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Отчество_пользователя",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "lastName" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Фамилия_пользователя",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "mobilePhone" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Телефон_пользователя",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "email" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Email_пользователя",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "status" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Код_статуса",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "statusName" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Наименование_статуса",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "signType" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Тип_подписи",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "companyName" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Название_организации",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "companyAddress" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Юридический_адрес_организации",Чтение.ТекущееЗначение);
			КонецЕсли;
			
		КонецЕсли; 			   
		
	КонецЦикла;	  
	
	
	СтрокаСообщения ="";
	КолСтрок = Информация.Количество();
	Для каждого Элемент из Информация Цикл
		СтрокаСообщения = СтрокаСообщения +Символы.ПС+СтрЗаменить(Элемент.Ключ,"_"," ")+"   -   "+Элемент.Значение;	   
	КонецЦикла;	   
	СтрокаСообщения = СтрокаСообщения +Символы.ПС;
	
	ПоказатьПредупреждение(, СтрокаСообщения , 0, "Информация о пользователе");
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 		
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОСчете(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		ПоказатьПредупреждение(, "Выберите счет организации." , 0, "Внимание !");
		Возврат;
		
	КонецЕсли;
	
	
	СтрокаЗапроса = "/partner/1.0.0/accounts/"+СокрЛП(Объект.БанковскийСчет.НомерСчета);
	
	HTTP_Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer "+Объект.НастройкаToken); 
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	Отв = мСоединениеHTTPПерем.Получить(HTTP_Запрос,ВременныйФайл); 
	
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния);
		
		// Удаление временного файла
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
	КонецЕсли;	
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	
	Информация = Новый Структура;
	
	// Чтение файла JSON
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если Чтение.ТекущееЗначение = "type" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Тип_счета",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "isCard" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Признак_карточного_счета",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "currCode" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Код_валюты_цифровой",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "currIso" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Код_валюты_символьный",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "amount" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Остаток_бухгалтерский",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "isOverdraft" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Признак_доступного_остатка_овердрафта",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "isReserved" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Признак_бронирования",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "isCatalog" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Признак_неоплаченного_остатка_картотеки:",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "isArrested" Тогда
				Чтение.Прочитать();
				Информация.Вставить("Признак_установленного_ареста",Чтение.ТекущееЗначение);
			КонецЕсли;
			Если Чтение.ТекущееЗначение = "actualBalanceDate" Тогда
				Чтение.Прочитать();
				НаДату = ДатуJSON_ВДату(Чтение.ТекущееЗначение);
				Информация.Вставить("Дата_и_время_актуальности_остатка",Формат(НаДату, "дд-ММ-гггг ЧЧ:мм:сс"));
			КонецЕсли;		  			
			
		КонецЕсли; 	
		
	КонецЦикла;	  
	
	
	СтрокаСообщения ="";
	КолСтрок = Информация.Количество();
	Для каждого Элемент из Информация Цикл
		СтрокаСообщения = СтрокаСообщения +Символы.ПС+СтрЗаменить(Элемент.Ключ,"_"," ")+"   -   "+Элемент.Значение;	   
	КонецЦикла;	   
	СтрокаСообщения = СтрокаСообщения +Символы.ПС;
	
	ПоказатьПредупреждение(, СтрокаСообщения , 0, "Информация о счете:  "+ СокрЛП(Объект.БанковскийСчет));
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти



// Сообщение описания ошибки HTTP запроса в банк
&НаКлиенте
Процедура СообщениеКодОтветаЗапроса(Код,Файл = Неопределено)
	
	СтрОтвет = "";
	
	ЕСЛИ Код = 400 ТОГДА
		СтрОтвет = "(400) Некорректный запрос !"; 
	ИНАЧЕЕСЛИ Код = 401 ТОГДА
		СтрОтвет = "Запрос не авторизирован !  Выполните авторизацию пользователя.";  
	ИНАЧЕЕСЛИ  Код = 500 ТОГДА
		СтрОтвет = "(500) Ошибка выполнения запроса !"; 
	ИНАЧЕ 
		СтрОтвет = "Код ошибки: "+ Строка(Код); 
	КОНЕЦЕСЛИ;
	
	Если  Файл <> Неопределено И Код <> 401 Тогда
		ФайлЧтение = Новый ЧтениеТекста(Файл,КодировкаТекста.UTF8);
		ВесьФайлОднойСтрокой = ФайлЧтение.Прочитать();
		ФайлЧтение.Закрыть();	
		СтрОтвет = СтрОтвет + Символы.ПС + ВесьФайлОднойСтрокой; 
	КонецЕсли;	
	
	ПоказатьПредупреждение(, СтрОтвет, 0, " Ошибка запроса в банк !");
	
КонецПроцедуры

// Обработка оповещения о закрытиии форм ностроек и подбора ПП
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) 

	 
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	БанковскийСчетПриИзменении(Элемент);	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура Подробно(Команда)
	
	ВыводДетальнойИнформации = Не ВыводДетальнойИнформации;
	Элементы.Подробно.Пометка = ВыводДетальнойИнформации;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоДокумента(СтрокаВыписки)
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыНовогоДокумента", ЭтаФорма, Новый Структура("db_Ключ", СтрокаВыписки.db_Ключ));
	
	ЭтоПриходныйДокумент = (СтрокаВыписки.Поступление > 0);
	
	Если ЭтоПриходныйДокумент Тогда
		
		ДанныеЗаполнения = Новый Структура("Контрагент", СтрокаВыписки.КонтрагентСсылка);
		ДанныеЗаполнения.Вставить("Организация", Объект.Организация);
		ДанныеЗаполнения.Вставить("Дата", СтрокаВыписки.Дата);
		ДанныеЗаполнения.Вставить("БанковскийСчет", СтрокаВыписки.СчетОрганизацииСсылка);
		ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента", СтрокаВыписки.ВходящаяДата);
		ДанныеЗаполнения.Вставить("НомерВходящегоДокумента", СтрокаВыписки.ВходящийНомер);
		ДанныеЗаполнения.Вставить("НазначениеПлатежа", СтрокаВыписки.НазначениеПлатежа);
		ДанныеЗаполнения.Вставить("СуммаДокумента", СтрокаВыписки.Поступление);
		
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);
		
		ОткрытьФорму("Документ.ПоступлениеНаСчет.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии);
		
	Иначе	
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуНовогоДокумента()

&НаСервере
Процедура ПриЗакрытииФормыНовогоДокумента(ФормаКонтрагента, СтруктураПараметров) Экспорт
	
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		возврат;
		
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("db_Ключ") Тогда
		
		возврат;
		
	КонецЕсли;
	
	
КонецПроцедуры // ПриЗакрытииФормыНовогоКонтрагента()

&НаКлиенте
Процедура ОткрытьФормуСуществующегоДокумента(ТекущаяСтрока)
	
	ЗаполненДокумент = ЗначениеЗаполнено(ТекущаяСтрока.ДокументСсылка);
	ЗаполненоПП = ЗначениеЗаполнено(ТекущаяСтрока.ПлатежноеПоручениеСсылка);
	
	Если Не ЗаполненДокумент И НЕ ЗаполненоПП Тогда
		
		возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.Поступление > 0 И ЗаполненДокумент Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока.ДокументСсылка);
		
		ОткрытьФорму("Документ.ПоступлениеНаСчет.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ТекущаяСтрока.Списание > 0 И ЗаполненДокумент Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока.ДокументСсылка);
		
		ОткрытьФорму("Документ.РасходСоСчета.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	ИначеЕсли ТекущаяСтрока.Списание > 0 И ЗаполненоПП Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока.ПлатежноеПоручениеСсылка);
		
		ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуСуществующегоДокумента()

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Объект.Список.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "СписокСтатусКонтрагента" Тогда
		
		Если ТекущаяСтрока.СтатусКонтрагента = 2 Тогда
			
			ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыНовогоКонтрагента", ЭтаФорма, Новый Структура("УНП", ТекущаяСтрока.УНП));
			
			ДанныеЗаполнения = Новый Структура("Наименование, НаименованиеПолное, ИНН", ТекущаяСтрока.Контрагент, ТекущаяСтрока.Контрагент, ТекущаяСтрока.УНП);
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);
			
			ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещенияОЗакрытии);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокКонтрагент" Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.КонтрагентСсылка) Тогда
			
			ПараметрыФ = Новый Структура("Ключ", ТекущаяСтрока.КонтрагентСсылка);
			
			ОткрытьФорму("Справочник.Контрагенты.ФормаОбъекта", ПараметрыФ, ЭтаФорма); 
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокСтатусДокумента" Тогда
		
		Если ТекущаяСтрока.СтатусДокумента = 2 Тогда
			
			ОткрытьФормуНовогоДокумента(ТекущаяСтрока);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "СписокВходящийНомер" ИЛИ Поле.Имя = "СписокВходящаяДата" Тогда
		
		ОткрытьФормуСуществующегоДокумента(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииФормыНовогоКонтрагента(ФормаКонтрагента, СтруктураПараметров) Экспорт
	
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		возврат;
		
	КонецЕсли;
	
	Если НЕ СтруктураПараметров.Свойство("УНП") Тогда
		
		возврат;
		
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН", СтруктураПараметров.УНП);
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		МассивСтрок = Объект.Список.НайтиСтроки(Новый Структура("УНП, КонтрагентСсылка", СтруктураПараметров.УНП, Справочники.Контрагенты.ПустаяСсылка()));
		Для Каждого СтрокаВыписки Из МассивСтрок Цикл
			
			СтрокаВыписки.КонтрагентСсылка = Контрагент;
			СтрокаВыписки.СтатусКонтрагента = 0;
			
		КонецЦикла;
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
	
	
КонецПроцедуры // ПриЗакрытииФормыНовогоКонтрагента()

&НаКлиенте
Процедура УстановитьПериоды()

	Объект.Период.ДатаНачала = Объект.Д_Начало;
	Объект.Период.ДатаОкончания = Объект.Д_Окончание;
	
КонецПроцедуры 


&НаКлиенте
Процедура УстановитьПериодВчера(Команда)
	
	Объект.Д_Начало = ТекущаяДата() - 60*60*24;
	Объект.Д_Окончание = ТекущаяДата() - 60*60*24;
	
	УстановитьПериоды();
	ЗагрузкаПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодаСегодня(Команда)
	
	Объект.Д_Начало = ТекущаяДата();
	Объект.Д_Окончание = ТекущаяДата();
	
	УстановитьПериоды();
	ЗагрузкаПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодДеньНазад(Команда)
	
	ПериодОдинДень = (Объект.Д_Начало = Объект.Д_Окончание);
	
	Объект.Д_Начало = Объект.Д_Начало - 60*60*24;
	
	Если ПериодОдинДень Тогда
		
		 Объект.Д_Окончание = Объект.Д_Начало;
		
	КонецЕсли;
	
	УстановитьПериоды();
	ЗагрузкаПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстарновитьПериодДеньВперед(Команда)
	
	ПериодОдинДень = (Объект.Д_Начало = Объект.Д_Окончание);
	
	Объект.Д_Окончание = Объект.Д_Окончание + 60*60*24;
	
	Если ПериодОдинДень Тогда
		
		Объект.Д_Начало = Объект.Д_Окончание;
		
	КонецЕсли;
	
	УстановитьПериоды();
	ЗагрузкаПриИзмененииРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыВыпискиНаСервере()
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыВыписки(Команда)
	
	СоздатьДокументыВыпискиНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	Для Каждого Строка Из Объект.Список Цикл
		
		Строка.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуУВсех(Команда)
	
	Для Каждого Строка Из Объект.Список Цикл
		
		Строка.Пометка = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнвертироватьОтметку(Команда)
	
	Для Каждого Строка Из Объект.Список Цикл
		
		Строка.Пометка = НЕ Строка.Пометка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление(Выписка, Исходящие)
	
	Для Каждого Строка Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		
		Если Строка.Представление = "Выписка" Тогда
			
			Строка.Использование = Выписка;
			
		КонецЕсли;
		
		Если Строка.Представление = "Исходящие" Тогда
			
			Строка.Использование = Исходящие;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьУсловноеОформление()

&НаКлиенте
Процедура Выписка(Команда)
	
	ОбновитьСписок(Истина, Ложь);
	
	Элементы.Выписка.Пометка = Истина;
	Элементы.Исходящие.Пометка = Ложь;
	Элементы.ВсеДокументы.Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Исходящие(Команда)
	
	ОбновитьСписок(Ложь, Истина);
    ПолучитьСписокСуществующихДокументов();
	
	Элементы.Выписка.Пометка = Ложь;
	Элементы.Исходящие.Пометка = Истина;
	Элементы.ВсеДокументы.Пометка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеИсходящие(Команда)
	
	Элементы.ВсеИсходящие.Пометка = НЕ Элементы.ВсеИсходящие.Пометка;
	
	Если Элементы.ВсеДокументы.Пометка Тогда
		
		ОбновитьСписок(Истина, Истина);
		
	ИначеЕсли Элементы.Исходящие.Пометка Тогда
		
		ОбновитьСписок(Ложь, Истина);
		
	Иначе
		
		ОбновитьСписок(Истина, Ложь);
		
	КонецЕсли;
	
    ПолучитьСписокСуществующихДокументов();
	
КонецПроцедуры


&НаКлиенте
Процедура ВсеДокументы(Команда)
	
	ОбновитьСписок(Истина, Истина);
	ПолучитьСписокСуществующихДокументов();
	
	Элементы.Выписка.Пометка = Ложь;
	Элементы.Исходящие.Пометка = Ложь;
	Элементы.ВсеДокументы.Пометка = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере(ЗаполнятьВыписку, ЗаполнитьИсходящие)
	
КонецПроцедуры // ОбновитьСписокНаСервере()

&НаКлиенте
Процедура ОбновитьСписок(ЗаполнятьВыписку, ЗаполнятьИсходящие)
	
	Загрузить(ЗаполнятьВыписку, ЗаполнятьИсходящие)
	
КонецПроцедуры // ОбновитьСписок()

#Область ИсходящиеДокументы

&НаСервере
Функция ПолучитьИзБанкаСозданныеДокументы(НачалоПериода, КонецПериода) 
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		возврат Истина;
		
	КонецЕсли;
	
	СтрокаЗапроса ="/partner/1.0.0/documents/?number=#Счета&pageNo=0&pageRowCount=0&dateFrom=#Дата1&dateTo=#Дата2&status=#Статус&type=legalPayments,individualPayments";
	
	// Запрос для проверки перед отправкой платежей 
	Если НачалоПериода<>Неопределено И КонецПериода<>Неопределено Тогда
		
		ДатаНач = ДатаВJSON(НачалоПериода);
		ДатаКон = ДатаВJSON(КонецПериода);	
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Дата1", ДатаНач);
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Дата2", ДатаКон);		   
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Счета","");		   
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Статус","");       		
		
	КонецЕсли;
	
	Если СокрЛП(Объект.СтатусДокументаБанка) = "10" Тогда
		
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Статус","");	
		
	Иначе
		
		СтрокаЗапроса = СтрЗаменить(СтрокаЗапроса,"#Статус", СокрЛП(Объект.СтатусДокументаБанка));			   
		
	КонецЕсли;
	
	СтрокаЗапроса = ФормированиеСтрокиЗапроса(СтрокаЗапроса, 3);
	
	ПараметрыСоединения = ПолучитьПараметрыПодключенияПоОрганизации(Объект.Организация);
	
	HTTP_Запрос = Новый HTTPЗапрос(СтрокаЗапроса);
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer " + ПараметрыСоединения.Token); 
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	
	Соединение = ПолучитьСоединение();
	
	Отв = Соединение.Получить(HTTP_Запрос, ВременныйФайл); 
	
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		// Удаление временного файла
		Файл = Новый Файл(ВременныйФайл);
		
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(ВременныйФайл);
			
		КонецЕсли; 
		
		Возврат Ложь;
		
	КонецЕсли;	
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	
	Объект.СозданныеДокументы.Очистить();
	
	// Переменные
	НоваяСтрока = Неопределено;
	Раздел = "";
	
	СозданныеДокументы = ПрочитатьJSON(Чтение);
	Для Каждого СтрокаДокумент Из СозданныеДокументы.page Цикл
		
		НоваяСтрока = Объект.СозданныеДокументы.Добавить();
		НоваяСтрока.ИД = СтрокаДокумент.id;
		НоваяСтрока.ДатаСоздания = ДатуJSON_ВДату(СтрокаДокумент.creationDate);
		НоваяСтрока.ДатаДокумента = ДатуJSON_ВДату(СтрокаДокумент.date);
		НоваяСтрока.НомерДокумента = СтрокаДокумент.num;
		НоваяСтрока.ТипДок = СтрокаДокумент.type;
		НоваяСтрока.ТипДокНаименование = СтрокаДокумент.typeName;
		НоваяСтрока.ПодтипДок = СтрокаДокумент.subType;
		НоваяСтрока.ПодтипДокНаименование = СтрокаДокумент.subTypeName;
		НоваяСтрока.СтатусДокумента = СтрокаДокумент.status;
		НоваяСтрока.СтатусНаименование = СтрокаДокумент.statusName;
		НоваяСтрока.ОтветБанка = СтрокаДокумент.answer;
		НоваяСтрока.НаименованиеОтправителя = СтрокаДокумент.name;
		НоваяСтрока.СчетОтправителя = СтрокаДокумент.number;
		НоваяСтрока.КодБанкаОтправителя = СтрокаДокумент.bic;
		НоваяСтрока.БанкОтправительНаименование = СтрокаДокумент.bank;
		
		Для Каждого СтрокаПараметр Из СтрокаДокумент.params Цикл
			
			Если СтрокаПараметр.name = "amount" Тогда
				
				НоваяСтрока.Сумма = СтрокаПараметр.value;
				
			ИначеЕсли СтрокаПараметр.name = "currIso" Тогда
				
				НоваяСтрока.КодВалюты = СтрокаПараметр.value;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	
	Файл = Новый Файл(ВременныйФайл);
	
	Если Файл.Существует() Тогда
		
		УдалитьФайлы(ВременныйФайл);
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСоединение()
	
	возврат Новый HTTPСоединение("developerhub.alfabank.by",8273,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
КонецФункции // ПолучитьСоединение()

&НаСервере
Процедура ПолучитьСписокСуществующихДокументов()
	
	НачалоПериода = Объект.Д_Начало;
	КонецПериода = Объект.Д_Окончание;
	
	// Получение списка уже отправленных ПП
	РезультатВыполнения = ПолучитьИзБанкаСозданныеДокументы(НачалоПериода, КонецПериода);
	
	
	Для Каждого Строка Из Объект.Список Цикл
		
		Если НЕ Строка.ИсходящийДокумент Тогда
			
			продолжить;
			
		КонецЕсли;
		
		// Обновим статусы платежек из банка
		Отбор = Новый Структура("НомерДокумента, ДатаДокумента", Строка.ВходящийНомер, Строка.ВходящаяДата);
		
		МассивСтрок = Объект.СозданныеДокументы.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			Строка.СтатусСтроки = МассивСтрок[0].СтатусНаименование;
			
			Строка.ИД_Документа = МассивСтрок[0].ИД;
			
		КонецЕсли;	
			
	КонецЦикла;  
	
	
КонецПроцедуры // 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШаблонОплатаЮрЛицу()
	
	возврат "{
	|""document"": {
	|		""num"": ""#NOM"",
	|		""type"": ""legalPayments"",
	|		""date"": ""#DATE"",
	|		""params"": [
	|			{
	|				""name"": ""type"",
	|				""value"": ""legalPayments""
	|			},
	|			{
	|				""name"": ""executionDate"",
	|				""value"": ""#EXECUTIONDATE""
	|			},
	|			{
	|				""name"": ""number"",
	|				""value"": ""#NUMBER""
	|			},
	|			{
	|				""name"": ""corrName"",
	|				""value"": ""#CORRNAME""
	|			},
	|			{
	|				""name"": ""corrUnp"",
	|				""value"": ""#CORRUNP""
	|			},
	|			{
	|				""name"": ""corrNumber"",
	|				""value"": ""#CORRNUMBER""
	|			},
	|			{
	|				""name"": ""corrBic"",
	|				""value"": ""#CORRBIC""
	|			},
	|			{
	|				""name"": ""amount"",
	|				""value"": ""#AMOUNT""
	|			},
	|			{
	|				""name"": ""purpose"",
	|				""value"": ""#PURPOSE""
	|			},
	|			{
	|				""name"": ""priority"",
	|				""value"": ""#PRIORITY""
	|			}
	|		]
	|	}
	|}";
	
КонецФункции // ПолучитьШаблонОплатаЮрЛицу()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШаблонОплатаФизЛицу()
	
	возврат "{
	|""document"": {
	|""date"": ""#DATE"",
	|""num"": ""#NOM"",
	|""type"": ""individualPayments"",
	|""params"": [
	|{
	|""name"": ""executionDate"",
	|""value"": ""#EXECUTIONDATE""
	|},
	|{
	|""name"": ""number"",
	|""value"": ""#NUMBER""
	|},
	|{
	|""name"": ""corrName"",
	|""value"": ""#CORRNAME""
	|},
	|{
	|""name"": ""corrBic"",
	|""value"": ""#CORRBIC""
	|},
	|{
	|""name"": ""amount"",
	|""value"": ""#AMOUNT""
	|},
	|{
	|""name"": ""purpose"",
	|""value"": ""#PURPOSE""
	|},
	|{
	|""name"": ""priority"",
	|""value"": ""#PRIORITY""
	|}
	|]
	|}
	|}";
	
КонецФункции // ПолучитьШаблонОплатаФизЛицу()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШаблонОплатаВБюджет()
	
	возврат "{
	|""document"": {
	|""date"": ""#DATE"",
	|""num"": ""#NOM"",
	|""type"": ""budgetPayments"",
	|""params"": [
	|{
	|""name"": ""executionDate"",
	|""value"": ""#EXECUTIONDATE""
	|},
	|{
	|""name"": ""number"",
	|""value"": ""#NUMBER""
	|},
	|{
	|""name"": ""corrName"",
	|""value"": ""#CORRNAME""
	|},
	|{
	|""name"": ""corrUnp"",
	|""value"": ""#CORRUNP""
	|},
	|{
	|""name"": ""corrNumber"",
	|""value"": ""#CORRNUMBER""
	|},
	|{
	|""name"": ""corrBic"",
	|""value"": ""#CORRBIC""
	|},
	|{
	|""name"": ""amount"",
	|""value"": ""#AMOUNT""
	|},
	|{
	|""name"": ""purpose"",
	|""value"": ""#PURPOSE""
	|},
	|{
	|""name"": ""priority"",
	|""value"": ""#PRIORITY""
	|},
	|{
	|""name"": ""otherUnp"",
	|""value"": ""#OTHERUNP""
	|},
	|{
	|""name"": ""budgetCode"",
	|""value"": ""#BUDGETCODE""
	|}
	|]
	|}
	|}";
	
КонецФункции // ПолучитьШаблонОплатаВБюджет()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьШаблонОплатаСебе()
	
	возврат "{
	|""document"": {
	|""date"": ""#DATE"",
	|""num"": ""#NOM"",
	|""type"": ""selfPayments"",
	|""params"": [
	|{
	|""name"": ""number"",
	|""value"": ""#NUMBER""
	|},
	|{
	|""name"": ""corrName"",
	|""value"": ""#CORRNAME""
	|},
	|{
	|""name"": ""amount"",
	|""value"": ""#AMOUNT""
	|},
	|{
	|""name"": ""purpose"",
	|""value"": ""#PURPOSE""
	|}
	|]
	|}
	|}";
	
КонецФункции // ПолучитьШаблонОплатаСебе()

&НаСервере
Функция ПолучитьТаблицуДокументовДляОтправкиВБанк() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.СчетОрганизации КАК СчетОрганизации,
	               |	Таблица.Пометка КАК Пометка,
	               |	Таблица.Дата КАК Дата,
	               |	Таблица.ПлатежноеПоручениеСсылка КАК ПлатежноеПоручение,
	               |	Таблица.ИсходящийДокумент КАК ИсходящийДокумент,
	               |	Таблица.СтатусДокумента КАК СтатусДокумента,
	               |	Таблица.Списание КАК Списание
	               |ПОМЕСТИТЬ втСписокДокументов
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втСписокДокументов.СчетОрганизации КАК СчетОрганизации,
	               |	втСписокДокументов.Дата КАК Дата,
	               |	втСписокДокументов.Списание КАК Списание,
	               |	втСписокДокументов.Пометка КАК Пометка,
	               |	втСписокДокументов.ПлатежноеПоручение КАК ПлатежноеПоручение,
	               |	втСписокДокументов.ИсходящийДокумент КАК ИсходящийДокумент,
	               |	втСписокДокументов.СтатусДокумента КАК СтатусДокумента,
	               |	ПП.Номер КАК НомерДокумента,
	               |	ПП.Дата КАК ДатаДокумента,
				   |	ПП.Дата КАК СрокИсполнения,
				   |	ПП.БанковскийСчет.НомерСчета КАК СчетПлательщика,
				   |	ПП.СчетКонтрагента.НомерСчета КАК СчетПолучателя,
				   |	ВЫБОР КОГДА втСписокДокументов.ПлатежноеПоручение.ВидОперации = &ПереводНаДругойСчет ТОГДА ПП.Организация.НаименованиеПолное ИНАЧЕ ПП.Контрагент.НаименованиеПолное КОНЕЦ КАК НаименованиеПолучателя,
				   |	ВЫБОР КОГДА втСписокДокументов.ПлатежноеПоручение.ВидОперации = &ПереводНаДругойСчет ТОГДА ПП.ИННПлательщика ИНАЧЕ ПП.ИННПолучателя КОНЕЦ КАК УНППолучателя,
				   |	ПП.СчетКонтрагента.Банк.Код КАК КодБанкаПолучателя, 
				   |	ПП.СуммаДокумента КАК СуммаПлатежа, 
				   |	ПП.НазначениеПлатежа КАК НазначениеПлатежа, 
				   |	ПП.ОчередностьПлатежа КАК ОчередностьПлатежа, 
				   |	"""" КАК УНПТретьегоЛица, 
				   |	ПП.КодПлатежа КАК КодПлатежа, 
				   |	0 КАК СтатусОтправки,
	               |	ПП.db_Ключ КАК db_Ключ
	               |ИЗ
	               |	втСписокДокументов КАК втСписокДокументов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПП
	               |		ПО втСписокДокументов.ПлатежноеПоручение = ПП.Ссылка
	               |ГДЕ
	               |	втСписокДокументов.Пометка
	               |	И втСписокДокументов.ИсходящийДокумент";
	
	Запрос.УстановитьПараметр("Таблица", Объект.Список.Выгрузить());
	Запрос.УстановитьПараметр("ПереводНаДругойСчет", Перечисления.ВидыОперацийПлатежноеПоручение.ПереводНаДругойСчет);
	
	рез = Запрос.Выполнить().Выгрузить();
	
	рез.Колонки.Добавить("ТекстСтатусаОтправки");
	рез.Колонки.Добавить("ОписаниеОшибки");
	
	возврат рез;
	
КонецФункции // ПолучитьТаблицуДокументовДляОтправкиВБанк()

&НаСервере
Процедура ОтправитьДокументыВБанк()
	
	ТаблицаПлатежей = ПолучитьТаблицуДокументовДляОтправкиВБанк();
	
	Если ТаблицаПлатежей.Количество() = 0 Тогда
	
		возврат;
		
	КонецЕсли;
	
	ПараметрыСоединения = ПолучитьПараметрыПодключенияПоОрганизации(Объект.Организация);
	
	ПараметрыАвторизации = "grant_type=refresh_token&refresh_token=#REFRESH&client_id=#ID&client_secret=#SECRET";
	
	НастройкиКлиента = db_ИнтерфейсыСервер.ПолучитьНастройкиКлиента();
	
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#REFRESH", ПараметрыСоединения.RefreshToken);
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#ID", НастройкиКлиента.ClientID);
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#SECRET", НастройкиКлиента.ClientSecret);
	
	HTTP_Запрос = Новый HTTPЗапрос("/partner/1.0.3/documents/");
	HTTP_Запрос.Заголовки.Вставить("Accept", "application/json");
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer " + ПараметрыСоединения.Token); 	
	HTTP_Запрос.Заголовки.Вставить("Content-Type", "application/json");
	
	
	
	
	ОплатаЮрЛицу = ПолучитьШаблонОплатаЮрЛицу();
	ОплатаФизЛицу = ПолучитьШаблонОплатаФизЛицу();
	ОплатаВБюджет = ПолучитьШаблонОплатаВБюджет();
	ОплатаСебе = ПолучитьШаблонОплатаСебе();
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");	   
	
	
	// Таймер
	ЗадержкаСекунд = 0.05;
	СтрокаЗапроса = "ping -n 1 -w "+Формат(1000 * ЗадержкаСекунд, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
	//WshShell = Новый COMОбъект("WScript.Shell"); 
	
	Для Каждого стр из ТаблицаПлатежей Цикл
		
		Если НЕ стр.ИсходящийДокумент Тогда
			
			продолжить;
			
		КонецЕсли;
		
		// Было отправлено сейчас 10
		Если стр.СтатусОтправки = 10 Тогда 
			
			Продолжить;
			
		КонецЕсли;
		
		// Было отправлено раньше 1
		Если стр.СтатусОтправки = 1 Тогда 
			
			Продолжить;
			
		КонецЕсли;	  
		
		ШаблонЗапроса = "";
		//Если СокрЛП(стр.ТипДокумента)  = "Платеж юрлицу" Тогда
			ШаблонЗапроса = ОплатаЮрЛицу;
		//КонецЕсли;	  
		//Если СокрЛП(стр.ТипДокумента)  = "Платеж физлицу" Тогда
		//	ШаблонЗапроса = ОплатаФизЛицу;
		//КонецЕсли;	  
		//Если СокрЛП(стр.ТипДокумента)  = "Платеж в бюджет" Тогда
		//	ШаблонЗапроса = ОплатаВБюджет;
		//КонецЕсли;	  
		//Если СокрЛП(стр.ТипДокумента)  = "Платеж себе" Тогда
		//	ШаблонЗапроса = ОплатаСебе;
		//КонецЕсли;	  
		
		
		
		//ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#DATE",					ДатаВJSON(стр.ДатаДокумента));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#DATE",					Формат(стр.ДатаДокумента, "ДФ=dd.MM.yyyy"));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#NOM",					НомерВJSON(стр.НомерДокумента));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#EXECUTIONDATE",			Формат(стр.СрокИсполнения, "ДФ=dd.MM.yyyy"));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#NUMBER",				СокрЛП(стр.СчетПлательщика));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#CORRNAME",				СтрокаВJSON(стр.НаименованиеПолучателя));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#CORRUNP",				СокрЛП(стр.УНППолучателя));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#CORRNUMBER",			СокрЛП(стр.СчетПолучателя));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#CORRBIC",				СокрЛП(стр.КодБанкаПолучателя));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#AMOUNT",				ЧислоВJSON(стр.СуммаПлатежа));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#PURPOSE",				СтрокаВJSON(стр.НазначениеПлатежа));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#PRIORITY",				СокрЛП(стр.ОчередностьПлатежа));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#OTHERUNP",				СокрЛП(стр.УНПТретьегоЛица));
		ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса,"#BUDGETCODE",			СокрЛП(стр.КодПлатежа));
		
		
		HTTP_Запрос.УстановитьТелоИзСтроки(ШаблонЗапроса, "CESU-8");
		
		Соединение = ПолучитьСоединение();
		
		Отв = Соединение.ОтправитьДляОбработки(HTTP_Запрос, ВременныйФайл);
		
		
		Если Отв.КодСостояния <> 200 Тогда 	
			
			Если Отв.КодСостояния = 401 Тогда
				
				СтрОтвет = "Запрос не авторизирован!  Выполните авторизацию пользователя.";  
				
				//ПоказатьПредупреждение(, СтрОтвет, 0, " Ошибка запроса в банк!");
				Возврат;
				
			КонецЕсли;	
			
			стр.СтатусОтправки = Отв.КодСостояния;
			
			ФайлЧтение = Новый ЧтениеТекста(ВременныйФайл,КодировкаТекста.UTF8);
			ВесьФайлОднойСтрокой = ФайлЧтение.Прочитать();
			ФайлЧтение.Закрыть();	
			стр.ОписаниеОшибки = ВесьФайлОднойСтрокой; 
			
		Иначе
			
			стр.СтатусОтправки = 10;
			стр.ТекстСтатусаОтправки = "Отправлен";
			стр.ОписаниеОшибки = "";
			
		КонецЕсли;	
		
		// Таймер
		//WshShell.Run(СтрокаЗапроса, 0, -1); 
		
		
	КонецЦикла; 
	
	Для Каждого Строка Из ТаблицаПлатежей Цикл
		
		Отбор = Новый Структура("ИсходящийДокумент, db_Ключ", Истина, Строка.db_ключ);
		МассивСтрок = Объект.Список.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			МассивСтрок[0].СтатусОТправки = Строка.СтатусОтправки;
			МассивСтрок[0].Комментарий = Строка.ОписаниеОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	WshShell = Неопределено;
	
	Соединение = Неопределено;
	
	// Удаление временного файла	
	Чтение = Неопределено;
	
	Файл = Новый Файл(ВременныйФайл);
	
	Если Файл.Существует() Тогда
		
		УдалитьФайлы(ВременныйФайл);
		
	КонецЕсли; 
	
КонецПроцедуры // ОтправитьДокументыВбанк()

&НаКлиенте
Процедура ОтправитьВБанк(Команда)
	
	ПолучитьСписокСуществующихДокументов();
	
	ОтправитьДокументыВБанк();
	
	ПолучитьСписокСуществующихДокументов();
	
КонецПроцедуры


&НаСервере
Процедура ПодписатьНаСервере(urlПодписи, ОписаниеОшибки)
	
	Отбор = Новый Структура("ИсходящийДокумент, СтатусСтроки, Пометка", Истина, "На подписании", Истина);
	МассивСтрок = Объект.Список.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		
		возврат;
		
	КонецЕсли;
	
	Массив_ИД = "";
	
	Для Каждого Стр из МассивСтрок Цикл
		
		Массив_ИД = Массив_ИД + ?(ПустаяСтрока(Массив_ИД), "", ",") + Строка(Стр.ИД_Документа);
		
	КонецЦикла;	
	
	Если СтрДлина(Массив_ИД) = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Массив_ИД = СтрЗаменить(Массив_ИД, " ", "");
	Массив_ИД = СтрЗаменить(Массив_ИД, Символы.НПП, "");
	
	ПараметрыСоединения = ПолучитьПараметрыПодключенияПоОрганизации(Объект.Организация);
	
	HTTP_Запрос = Новый HTTPЗапрос("/partner/1.0.3/documents/signs/initialize");
	HTTP_Запрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTP_Запрос.Заголовки.Вставить("Authorization","Bearer " + ПараметрыСоединения.Token); 	
	
	
	ДанныеЗапроса = "
	|{
	|""queryIds"": [#Массив_ИД],
	|""redirectUrl"": ""test.com""
	|}";
	
	
	
	ДанныеЗапроса = СтрЗаменить(ДанныеЗапроса,"#Массив_ИД", Массив_ИД);
	
	HTTP_Запрос.УстановитьТелоИзСтроки(ДанныеЗапроса, "CESU-8");
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	
	Соединение = ПолучитьСоединение();
	
	
	
	Отв = Соединение.ОтправитьДляОбработки(HTTP_Запрос, ВременныйФайл);
	
	
	
	Если Отв.КодСостояния <> 200 Тогда 	   
		
		// Удаление временного файла	
		
		
		ФайлЧтение = Новый ЧтениеТекста(ВременныйФайл, КодировкаТекста.UTF8);
		ВесьФайлОднойСтрокой = ФайлЧтение.Прочитать();
		ФайлЧтение.Закрыть();	
		ОписаниеОшибки = ВесьФайлОднойСтрокой; 
		
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			УдалитьФайлы(ВременныйФайл);
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;	   
		
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	// Чтение файла JSON
	Тикет = "";
	Пока Чтение.Прочитать() Цикл	   
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если Чтение.ТекущееЗначение = "ticket" Тогда
				Чтение.Прочитать();
				Тикет = Чтение.ТекущееЗначение;										
			КонецЕсли;
		КонецЕсли;	   
	КонецЦикла;	   
	
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		
		УдалитьФайлы(ВременныйФайл);
		
	КонецЕсли; 
	
	Соединение = Неопределено;
	
	СтрокаЗапроса = СтрЗаменить("/partner/1.0.3/documents/signs/verify?ticket=#Ticket", "#Ticket", Тикет);
		
	urlПодписи = СтрокаЗапроса;	
	
КонецПроцедуры // ПодписатьНаСервере()

&НаКлиенте
Процедура Подписать(Команда)
	
	СтрокаЗапроса = "";
	ОписаниеОшибки = "";
	
	ПодписатьНаСервере(СтрокаЗапроса, ОписаниеОшибки);
	
	
	Если Не ПустаяСтрока(СтрокаЗапроса) Тогда
		
		СтруктураПодпись = Новый Структура("АдресСтраницы", "https://developerhub.alfabank.by:8273" + СтрокаЗапроса);	
		ОткрытьФорму("Обработка.db_DriveBank.Форма.ФормаПодписи", Новый Структура("Подпись", СтруктураПодпись), ЭтаФорма,,,, ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		
	КонецЕсли;
	
	Элементы.ДекорацияПодвал.Заголовок = ОписаниеОшибки;
		
КонецПроцедуры


#КонецОбласти