#Область Переменные

&НаСервере
Перем мНастройкиДоступа;

#КонецОбласти

&НаСервере
Процедура УстановитьСписокПоддерживаемыхБанков() Экспорт
	
	МассивКодов = Новый Массив;
	МассивКодов.Добавить("ALFABY2X");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Банки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Банки КАК Банки
		|ГДЕ
		|	Банки.Код В(&МассивКодов)";
	
	Запрос.УстановитьПараметр("МассивКодов", МассивКодов);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаБанков.Загрузить(ТаблицаРезультат);
	
	мМассивБанков = ТаблицаРезультат.ВыгрузитьКолонку("Ссылка");
	
	СписокСчетов.Параметры.УстановитьЗначениеПараметра("СписокБанков", мМассивБанков);
	
КонецПроцедуры // УстановитьМассивПоддерживаемыхБанков()

&НаСервере
Процедура ПрочитатьНастройкиДоступа()
	
	СоответствиеНастроек = ПолучитьИзВременногоХранилища(АдресНастроекДоступа);
	
	//СоответствиеНастроек = Новый Соответствие;
	
	Для Каждого СтрокаНастройки Из СоответствиеНастроек Цикл
		
		НоваяСтрока = ТаблицаПараметровПодключения.Добавить();
		НоваяСтрока.Организация = СтрокаНастройки.Ключ;
		НоваяСтрока.ПараметрыПодключения = СтрокаНастройки.Значение;
		
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьНатсройкиДоступа()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	#Область Инициализация
	
	УстановитьСписокПоддерживаемыхБанков();
	
	НадписьСсылкаНаКабинет = "online.alfabank.by";
	
	АдресНастроекДоступа = Параметры.АдресНастроекДоступа;
	
	ПрочитатьНастройкиДоступа();
	
	#КонецОбласти
	
	Объект.НастройкаСписокОрганизаций = ХранилищеОбщихНастроек.Загрузить("КлиентБанкАПИ", "Организации");
	
	Если Объект.НастройкаСписокОрганизаций.Количество() > 0 Тогда
		Ключ = Объект.НастройкаСписокОрганизаций.Получить(0).Значение;	
		Объект.НастройкаToken = ХранилищеОбщихНастроек.Загрузить(Ключ, "Token");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	 Оповестить("ФормаНастроекЗакрыта");
		 
КонецПроцедуры


&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ЭтаФорма.Закрыть();
	 
КонецПроцедуры


&НаКлиенте
Процедура СообщениеКодОтветаЗапроса(Код)
	
	СтрОтвет = "";
	
	ЕСЛИ Код = 400 ТОГДА
		СтрОтвет = "Некорректный запрос!"; 
	ИНАЧЕЕСЛИ Код = 401 ТОГДА
		СтрОтвет = "Запрос не авторизирован!  Выполните авторизацию пользователя.";  
	ИНАЧЕЕСЛИ  Код = 500 ТОГДА
		СтрОтвет = "Ошибка выполнения запроса!"; 
	ИНАЧЕ 
		СтрОтвет = "Код ошибки: "+ Строка(Код); 
	КОНЕЦЕСЛИ;
	
	ПоказатьПредупреждение(, СтрОтвет, 0, " Ошибка связи с банком !");
	
КонецПроцедуры

&НаСервере
Процедура ВключитьОтключитьНаСервере(ОрганизацияСсылка, Значение, KeyAPI = "")
	
	Если Не ТипЗнч(ОрганизацияСсылка) = Тип("СправочникСсылка.Организации") Тогда
		
		возврат;
		
	КонецЕсли;
	
	ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
	ОрганизацияОбъект.db_ИспользуетсяDriveBank = Значение;
	ОрганизацияОбъект.db_KeyAPI = KeyAPI;
	ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
	ОрганизацияОбъект.Записать();
	
	Если Значение Тогда
	
		//ТокеныУспешноОбновлены = ОбновитьПолучитьТокены();
		
		//Если ТокеныУспешноОбновлены Тогда
		//	
		//	ОбновитьСписокДоступныхСчетов();
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьKeyAPI(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаKeyAPI", ЭтотОбъект);
	
	ПоказатьВводСтроки(
	Оповещение,
	"<< Введите Key API, полученный в кабинете пользователя >>", 
	"Key API",
	0, // (необ.) длина
	Ложь // (необ.) многострочность
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаKeyAPI(Результат, Параметры) Экспорт 
	
	KeyAPI = "";
	
	Если Не Результат = Неопределено Тогда
		
		KeyAPI = Результат; 
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокОрганизаций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		возврат;
		
	КонецЕсли;
	
	ВключитьОтключитьНаСервере(ТекущиеДанные.Ссылка, Истина, KeyAPI);
	Элементы.СписокОрганизаций.Обновить();
 
КонецПроцедуры

&НаСервере
Функция ПолучитьKeyAPI(Организация)
	
	рез = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.db_KeyAPI КАК db_KeyAPI
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		рез = Выборка.db_KeyAPI;
		
	КонецЕсли;;
	
	возврат рез;
	
КонецФункции // ПолучитьKeyAPI()

&НаКлиенте
Процедура ВключитьОтключить(Команда)
	
	ТекущиеДанные = Элементы.СписокОрганизаций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		возврат;
		
	КонецЕсли;
	
	KeyAPI = ПолучитьKeyAPI(ТекущиеДанные.Ссылка);
	
	Если Не ЗначениеЗаполнено(KeyAPI) Тогда
		
		ОбновитьKeyAPI(Команда);
		возврат;
		
	КонецЕсли;
	
	ВключитьОтключитьНаСервере(ТекущиеДанные.Ссылка, Истина, KeyAPI);
	Элементы.СписокОрганизаций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОрганизации(Организация) 
	
	СписокСчетов.Параметры.УстановитьЗначениеПараметра("Организация", Организация);
	СписокОрганизаций.Параметры.УстановитьЗначениеПараметра("ПустаяСтрока", "");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОрганизацийПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокОрганизаций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		
	Иначе
		
		Организация = ТекущиеДанные.Ссылка;
		
	КонецЕсли;
	
	УстановитьОтборПоОрганизации(Организация);
	
КонецПроцедуры


&НаКлиенте
Процедура Отключить(Команда)
	
	ТекущиеДанные = Элементы.СписокОрганизаций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		возврат;
		
	КонецЕсли;
	
	ВключитьОтключитьНаСервере(ТекущиеДанные.Ссылка, Ложь);
	Элементы.СписокОрганизаций.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСсылкаНаКабинетОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗапуститьПриложение("http://online.alfabank.by/");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыПодключенияПоОрганизации(Организация)
	
	Отбор = Новый Структура("Организация", Организация);
	
	МассивСтрок = ТаблицаПараметровПодключения.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		рез = МассивСтрок[0].ПараметрыПодключения;
		
	Иначе
		
		рез = Неопределено;
		
	КонецЕсли;
	
	возврат рез;
	
КонецФункции

&НаСервере
Процедура СоздатьОбновитьСчет(ДанныеСчета, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	БанковскиеСчета.НомерСчета КАК НомерСчета,
		|	БанковскиеСчета.db_ИспользуетсяDriveBank КАК db_ИспользуетсяDriveBank,
		|	БанковскиеСчета.Наименование КАК Наименование,
		|	БанковскиеСчета.Банк КАК Банк
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.Банк В(&МассивБанков)
		|	И БанковскиеСчета.НомерСчета = &НомерСчета
		|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	МассивБанков = ТаблицаБанков.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("МассивБанков", МассивБанков);
	Запрос.УстановитьПараметр("НомерСчета", СокрЛП(ДанныеСчета.number));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если НЕ Выборка.db_ИспользуетсяDriveBank Тогда
			
			// обновим статус счета
			СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СчетОбъект.db_ИспользуетсяDriveBank = Истина;
			СчетОбъект.ОбменДанными.Загрузка = Истина;
			СчетОбъект.Записать();
			
		КонецЕсли;
		
	Иначе
		
		// Не нашли нужный счет
		СчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		СчетОбъект.Наименование = "Новый счет";
		СчетОбъект.Банк = МассивБанков[0];
		СчетОбъект.Владелец = Организация;
		СчетОбъект.НомерСчета = СокрЛП(ДанныеСчета.number);
		СчетОбъект.ВалютаДенежныхСредств = Справочники.Валюты.НайтиПоНаименованию(СокрЛП(ДанныеСчета.currIso));
		СчетОбъект.db_ИспользуетсяDriveBank = Истина;
		СчетОбъект.СчетУчета = ПланыСчетов.Управленческий.Банк;
		СчетОбъект.ВидСчета = "Расчетный";
		СчетОбъект.Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры // СоздатьОбновитьСчет()

&НаСервере
Процедура ОтключитьНеиспользуемыеСчета(Счета, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Ссылка,
		|	БанковскиеСчета.НомерСчета КАК НомерСчета,
		|	БанковскиеСчета.db_ИспользуетсяDriveBank КАК db_ИспользуетсяDriveBank,
		|	БанковскиеСчета.Наименование КАК Наименование,
		|	БанковскиеСчета.Банк КАК Банк
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.Банк В(&МассивБанков)
		|	И НЕ БанковскиеСчета.НомерСчета В (&МассивСчетов)
		|	И НЕ БанковскиеСчета.ПометкаУдаления
		|	И БанковскиеСчета.db_ИспользуетсяDriveBank";
	
	МассивБанков = ТаблицаБанков.Выгрузить(, "Ссылка").ВыгрузитьКолонку("Ссылка");
	
	МассивСчетов = Новый Массив;
	
	Для Каждого СтрокаСчет Из Счета.accounts Цикл
		
		МассивСчетов.Добавить(СокрЛП(СтрокаСчет.number));
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("МассивБанков", МассивБанков);
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// обновим статус счета
		СчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СчетОбъект.db_ИспользуетсяDriveBank = Ложь;
		СчетОбъект.ОбменДанными.Загрузка = Истина;
		СчетОбъект.Записать();
			
	КонецЦикла;
	
	
КонецПроцедуры // СоздатьОбновитьСчет()

&НаСервере
Процедура ОбновитьСписокСчетовНаСервере(Организация)
	
	ПараметрыСоединения = ПолучитьПараметрыПодключенияПоОрганизации(Организация);
	
	Если ПараметрыСоединения = Неопределено Тогда
		
		возврат;
		
	КонецЕсли;
	
	СоединениеHTTP = Новый HTTPСоединение("developerhub.alfabank.by", 8273,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	Запрос = Новый HTTPЗапрос("/partner/1.0.0/accounts/");
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Authorization", "Bearer " + ПараметрыСоединения.token); 
	Запрос.Заголовки = ЗаголовокHTTP;
	
	// Выполнение GET запроса в банк
	Отв = СоединениеHTTP.Получить(Запрос,ВременныйФайл);
	СоединениеHTTP = Неопределено;
	
	Если Отв.КодСостояния <> 200 Тогда 
		
		//СообщениеКодОтветаЗапроса(Отв.КодСостояния);
		Чтение = Неопределено;
		
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(ВременныйФайл);
			
		КонецЕсли; 
		
		Возврат;
		
	КонецЕсли;	
	
	
	Объект.НастройкаСписокСчетов.Очистить();
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	Счета = ПрочитатьJSON(Чтение);
	
	ОтключитьНеиспользуемыеСчета(Счета, Организация);
	
	Для Каждого СтрокаСчет Из Счета.accounts Цикл
		
		СоздатьОбновитьСчет(СтрокаСчет, Организация);
		
	КонецЦикла;
	
	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		
		УдалитьФайлы(ВременныйФайл);
		
	КонецЕсли;   
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСчетов(Команда)
	
	ТекущиеДанные = Элементы.СписокОрганизаций.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		возврат;
		
	КонецЕсли;
	
	ОбновитьСписокСчетовНаСервере(ТекущиеДанные.Ссылка);
	Элементы.СписокСчетов.Обновить();
	
КонецПроцедуры



