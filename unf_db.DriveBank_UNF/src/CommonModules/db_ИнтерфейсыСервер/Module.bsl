#Область ФункцииПреобразованияДанных


Функция ДатаВJSON(Дата)
	
	ДатаJSON = Формат(Дата,"ДФ=yyyy-MM-dd");
	
	ДатаJSON = ДатаJSON + "T00:00:00.000Z"; 
	
	Возврат ДатаJSON; 
   
КонецФункции // ДатаВJSON()

Функция ЧислоВJSON(Сумма)
	
	СуммаСтрока = СокрЛП(Строка(Сумма));	
	СуммаСтрока = СтрЗаменить(СуммаСтрока,Символы.НПП,"");
	СуммаСтрока = СтрЗаменить(СуммаСтрока," ","");
	СуммаСтрока = СтрЗаменить(СуммаСтрока,",",".");
	
	Возврат СуммаСтрока; 
	
КонецФункции // ЧислоВJSON()

Функция СтрокаВJSON(Текст)
	
	СтрокаВозврата = СокрЛП(Текст);
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.НПП,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВК,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ПС,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВТаб,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.Таб,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"""","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"»","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"«","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"›","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"‹","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"+","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,":"," ");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,";"," ");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"\"," ");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"/"," ");
	
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"{","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"}","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"[","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"]","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"^","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"'","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"&","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"@","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"=","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"?","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"$","");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"№","N");
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция НомерВJSON(Текст)
	
	СтрокаВозврата = СокрЛП(Текст);
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.НПП,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВК,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ПС,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.ВТаб,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,Символы.Таб,"");
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата," ","");
	
	пп = СтрНайти(СтрокаВозврата,"-");
	Если пп > 0 Тогда
		СтрокаВозврата = Сред(СтрокаВозврата,пп+1); 
	КонецЕсли;	   
	СтрокаВозврата = СтрЗаменить(СтрокаВозврата,"-","0");
	Если ПустаяСтрока(СтрокаВозврата) Тогда
		СтрокаВозврата = "0";
	КонецЕсли;		
	
	Возврат СтрокаВозврата; 
	
КонецФункции

Функция ДатуJSON_ВДату(СДата)
	
	стд = Лев(СДата,19);
	стд = СтрЗаменить(стд,"-","");
	стд = СтрЗаменить(стд,":","");
	стд = СтрЗаменить(стд,"T","");
	
	Возврат(Дата(стд));
	
КонецФункции	

Функция ПреобразоватьвСистему(Число10,система)
	
	Если система > 36 ИЛИ система < 2 Тогда
		Сообщить("Выбранная система исчисления не поддерживается");
		Возврат -1;
	КонецЕсли;
	
	СтрокаЗначений = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	СтрокаСистема = "";
	Пока Число10 > 0 Цикл
		РезДеления = Число10/система;
		ЧислоСистема = цел(РезДеления);
		остатокОтДеления = Число10 - система*(ЧислоСистема);
		СтрокаСистема = сред(СтрокаЗначений,остатокОтДеления+1,1)+ СтрокаСистема;
		Число10 = ?(ЧислоСистема=0,0,РезДеления); 
	КонецЦикла;
	
	Нечётное = стрДлина(СтрокаСистема) - цел(стрДлина(СтрокаСистема)/2)*2;
	Если Нечётное Тогда
		СтрокаСистема = "0"+СтрокаСистема;
	КонецЕсли;
	
	Возврат СтрокаСистема;
	
КонецФункции

Функция URLEncode(Стр="")
	
	Длина=СтрДлина(Стр);
	Итог="";
	Для Н=1 По Длина Цикл
		Знак=Сред(Стр,Н,1);
		Код=КодСимвола(Знак);
		
		Если ((Знак>="a")и(Знак<="z")) ИЛИ
			((Знак>="A")и(Знак<="Z")) ИЛИ
			((Знак>="0")и(Знак<="9")) Тогда
			Итог=Итог+Знак;
		Иначе
			Если (Код>=КодСимвола("А"))И(Код<=КодСимвола("п")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(144+Код-КодСимвола("А"),16);
			ИначеЕсли (Код>=КодСимвола("р"))И(Код<=КодСимвола("я")) Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(128+Код-КодСимвола("р"),16);
			ИначеЕсли (Знак="ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(209,16)+"%"+ПреобразоватьвСистему(145,16);
			ИначеЕсли (Знак="Ё") Тогда
				Итог=Итог+"%"+ПреобразоватьвСистему(208,16)+"%"+ПреобразоватьвСистему(129,16);
			Иначе
				Итог=Итог+"%"+ПреобразоватьвСистему(Код,16);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Итог;
	
КонецФункции


#КонецОбласти

Процедура СообщениеКодОтветаЗапроса(Код, ТекстОшибки, Файл = Неопределено)
	
	СтрОтвет = "";
	
	Если Код = 400 Тогда
		
		СтрОтвет = "(400) Некорректный запрос !"; 
		
	ИначеЕсли Код = 401 Тогда
		
		СтрОтвет = "Запрос не авторизирован !  Выполните авторизацию пользователя.";  
		
	ИначеЕсли  Код = 500 Тогда
		
		СтрОтвет = "(500) Ошибка выполнения запроса !"; 
		
	Иначе 
		
		СтрОтвет = "Код ошибки: "+ Строка(Код); 
		
	КонецЕсли;
	
	ТекстОшибки = СтрОтвет;
	
	//Если  Файл <> Неопределено И Код <> 401 Тогда
	//	ФайлЧтение = Новый ЧтениеТекста(Файл,КодировкаТекста.UTF8);
	//	ВесьФайлОднойСтрокой = ФайлЧтение.Прочитать();
	//	ФайлЧтение.Закрыть();	
	//	СтрОтвет = СтрОтвет + Символы.ПС + ВесьФайлОднойСтрокой; 
	//КонецЕсли;	
	
КонецПроцедуры


&НаСервере
Функция ПолучитьНастройкиКлиента() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ClientID", "aKDtd_wzjNPJrZ3XEA5cV9OlwXYa");
	СтруктураПараметров.Вставить("ClientSecret", "Pf18lD6rJcsjhRLElZYAJe_hR_Ea");
	
	возврат СтруктураПараметров;
	
КонецФункции // ПолучитьНастройкиКлиента()

Функция ПолучитьВремяЖизниСеанса()
	
	// 30 минут
	возврат 60 * 30;
	
КонецФункции // ПолучитьВремяЖизниСеанса()


Функция ТребуетсяПовторнаяАвторизация() Экспорт
	
	возврат Ложь;
	
КонецФункции // ТребуетсяПовторнаяАвторизация()

&НаСервере
Функция ПолучитьKeyAPI(Организация) Экспорт
	
	рез = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.db_KeyAPI КАК db_KeyAPI
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		рез = Выборка.db_KeyAPI;
		
	КонецЕсли;;
	
	возврат рез;
	
КонецФункции // ПолучитьKeyAPI()

Функция ПолучитьПараметрыПодключения(KeyAPI) Экспорт
	
	Перем ОтветСервера;
	
	access_token = "";
	refresh_token = "";
	
	
	мСоединениеHTTPПерем = Новый HTTPСоединение("developerhub.alfabank.by",8273,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	
	НастройкиКлиента = ПолучитьНастройкиКлиента();
	
	ПараметрыАвторизации = "grant_type=password&username=#API&client_id=#ID&client_secret=#SECRET&scope=accounts read_documents profile create_documents sign_documents";
	
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#API", URLEncode(keyAPI));
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#ID", НастройкиКлиента.ClientID);
	ПараметрыАвторизации = СтрЗаменить(ПараметрыАвторизации,"#SECRET", НастройкиКлиента.ClientSecret);
	
	HTTP_Запрос = Новый HTTPЗапрос("/token");
	HTTP_Запрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTP_Запрос.УстановитьТелоИзСтроки(ПараметрыАвторизации, "CESU-8");
	
	
	ВременныйФайл =  ПолучитьИмяВременногоФайла("txt");
	
	Отв = мСоединениеHTTPПерем.ОтправитьДляОбработки(HTTP_Запрос, ВременныйФайл);
	
	Если Отв.КодСостояния <> 200 Тогда 	
		
		СообщениеКодОтветаЗапроса(Отв.КодСостояния, ОтветСервера, ВременныйФайл);
		
		// Удаление временного файла	
		Чтение = Неопределено;
		Файл = Новый Файл(ВременныйФайл);
		Если Файл.Существует() Тогда
			
			УдалитьФайлы(ВременныйФайл);
			
		КонецЕсли; 
		
		Возврат Новый Структура("access_token, refresh_token, ЕстьОшибки, ТекстОшибки", "", "", Истина, ОтветСервера);
		
	КонецЕсли;
	
	
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл(ВременныйФайл);
	
	// Чтение файла JSON 
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			
			Если Чтение.ТекущееЗначение = "access_token" Тогда
				
				Чтение.Прочитать();
				
				access_token = Чтение.ТекущееЗначение;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Чтение.ТекущееЗначение = "refresh_token" Тогда
				
				Чтение.Прочитать();
				
				refresh_token = Чтение.ТекущееЗначение;
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	Чтение = Неопределено;
	
	// Удаление временного файла	
	Чтение = Неопределено;
	Файл = Новый Файл(ВременныйФайл);
	Если Файл.Существует() Тогда
		УдалитьФайлы(ВременныйФайл);
	КонецЕсли; 
	
	Возврат Новый Структура("access_token, refresh_token, ЕстьОшибки, ТекстОшибки", access_token, refresh_token, Ложь, ОтветСервера);
	
КонецФункции


Функция ПолучитьСоответствиеНастроекДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.db_KeyAPI КАК db_KeyAPI,
		|	Организации.ИНН КАК УНП,
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.db_ИспользуетсяDriveBank";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СоответствиеНастроек = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		
		Токены = ПолучитьПараметрыПодключения(Выборка.db_KeyAPI);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("KeyAPI", Выборка.db_KeyAPI);
		СтруктураПараметров.Вставить("token", Токены.access_token);
		СтруктураПараметров.Вставить("refreshtoken", Токены.refresh_token);
		СтруктураПараметров.Вставить("УНП", Выборка.УНП);
		СтруктураПараметров.Вставить("СоединениеУстановлено", Не Токены.ЕстьОшибки);
		СтруктураПараметров.Вставить("ВремяОбновления", ТекущаяУниверсальнаяДата());
		СтруктураПараметров.Вставить("ТекстОшибки", Токены.ТекстОшибки);
		
		СоответствиеНастроек.Вставить(Выборка.Организация, СтруктураПараметров);
		
		
	КонецЦикла;
	
	возврат СоответствиеНастроек;
	
КонецФункции// ПолучитьСоответствиеНастроекДоступа()

Процедура ОбновитьСписокСчетов() Экспорт
	
КонецПроцедуры // ОбновитьСписокСчетов()


#Область РазбоВыпискиБанка

Функция ПолучитьСписокКонтрагентов(УНП) Экспорт
	
	рез = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &УНП
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("УНП", УНП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		рез.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	возврат рез;

	
КонецФункции // ПолучитьСписокКонтрагентов()

#КонецОбласти